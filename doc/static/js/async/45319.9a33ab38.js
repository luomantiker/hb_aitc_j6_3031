"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["45319"],{23273:function(e,t,n){e.exports=n.p+"static/image/P1architecture1.b1ef7d95.png"},75469:function(e,t,n){e.exports=n.p+"static/image/P1architecture2.10ceea04.png"},1235:function(e,t,n){n.r(t);var r=n(85893),i=n(50065),o=n(95895),s=n(23273),a=n(75469);function c(e){let t=Object.assign({h1:"h1",a:"a",p:"p",ol:"ol",li:"li"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.h1,{id:"introduction",children:[(0,r.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#introduction",children:"#"}),"Introduction"]}),"\n",(0,r.jsx)(o.Z,{}),"\n",(0,r.jsxs)(t.p,{children:["The custom operator development module provides an interface for you to use the programmable hardware resources provided by the development board to further meet your diverse operator needs. The current programmable backend includes ",(0,r.jsx)(t.a,{href:"/3.0.22/en/guide/ucp/plugin/dsp_develop/dsp_intro.html",children:"Cadence Vision Q8 DSP"}),", Mali A78 GPU\u3002"]}),"\n",(0,r.jsx)(t.p,{children:"The development of DSP is mainly divided into two steps:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Use the tools and materials provided by Cadence to complete the operator development;"}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Register the operator through the API provided by UCP and complete the deployment on the development version."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Its functional architecture is shown in the figure below:"}),"\n",(0,r.jsx)("img",{src:s,alt:"P1architecture1",height:"700",width:"700"}),"\n",(0,r.jsx)(t.p,{children:"In the above architecture diagram, the DSP custom operator application generates the task handle of the corresponding operator through the interface provided by the custom module, registers the DSP operator to the DSP image to perform the compilation and deployment.\nUCP provides a service including modules such as task scheduling, session management, and engine management. After the task handle of the corresponding operator is generated, the operator task is submitted to the task queue through the UCP task scheduling interface and assigned to the DSP underlying hardware to implement the functional logic of the operator."}),"\n",(0,r.jsx)(t.p,{children:"GPU development uses the native OpenCL interface, and its functional architecture is shown in the following figure:"}),"\n",(0,r.jsx)("img",{src:a,alt:"P1architecture1",height:"700",width:"700"})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,i.ah)(),e.components);return t?(0,r.jsx)(t,Object.assign({},e,{children:(0,r.jsx)(c,e)})):c(e)}t.default=d,d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["3.0.22%2Fen%2Fguide%2Fucp%2Fplugin%2Fintroduction.mdx"]={toc:[],title:"Introduction",frontmatter:{}}},95895:function(e,t,n){n(39710);var r=n(85893),i=n(67294),o=n(45687);n(20388);let s={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"\u5C0F\u4E8E 1 \u5206\u949F"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function a(e,t,n){let r=Object.keys(s).includes(t)?t:n;return s[r](e)}t.Z=e=>{let{defaultLocale:t="en-US"}=e,n=(0,o.Vi)().page.readingTimeData,s=(0,o.Jr)(),c=(0,o.e7)(),[d,h]=(0,i.useState)(a(n,s,t));return(0,i.useEffect)(()=>{h(a(n,s,t))},[s,n]),(0,r.jsx)("span",{"data-dark":String(c),className:"rp-reading-time",children:d})}}}]);