"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["52273"],{83706:function(e,t,n){e.exports=n.p+"static/image/task_running.247ac688.jpg"},91235:function(e,t,n){e.exports=n.p+"static/image/runtime_dev_faq.8b74df0b.png"},17851:function(e,t,n){n.r(t);var s=n(85893),r=n(50065),a=n(95895),i=n(91235),o=n(83706);function h(e){let t=Object.assign({h1:"h1",a:"a",h2:"h2",h3:"h3",p:"p",ul:"ul",li:"li",code:"code",h4:"h4",ol:"ol",pre:"pre",span:"span"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h1,{id:"faq",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#faq",children:"#"}),"FAQ"]}),"\n",(0,s.jsx)(a.Z,{}),"\n",(0,s.jsxs)(t.h2,{id:"general-issues",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#general-issues",children:"#"}),"General Issues"]}),"\n",(0,s.jsxs)(t.h3,{id:"what-is-the-reason-for-returning-hb_ucp_invalid_argument-error-code-after-task-creation-or-submission",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#what-is-the-reason-for-returning-hb_ucp_invalid_argument-error-code-after-task-creation-or-submission",children:"#"}),"What is the reason for returning HB_UCP_INVALID_ARGUMENT error code after task creation or submission?"]}),"\n",(0,s.jsx)(t.p,{children:"Possible problems can be determined from the UCP error logs, which may exist as follows:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Operator Constraint Problem: Most acceleration operators should satisfy usage constraints when they are created, otherwise they will return error code."}),"\n",(0,s.jsxs)(t.li,{children:["If you encounter a log that prints ",(0,s.jsx)(t.code,{children:"op $1 of task has no proper backend, user expect $2"}),", indicating that there is no proper backend available for execution, where ",(0,s.jsx)(t.code,{children:"$1"})," indicates the type of the task and ",(0,s.jsx)(t.code,{children:"$2"})," is the backend parameter when the task is submitted in binary form, and the configuration needs to be done according to the number of cores that each J6 series backend can support."]}),"\n"]}),"\n",(0,s.jsxs)(t.h3,{id:"how-to-understand-the-physical-and-virtual-addresses-of-hbucpsysmem",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#how-to-understand-the-physical-and-virtual-addresses-of-hbucpsysmem",children:"#"}),"How to understand the physical and virtual addresses of hbUCPSysMem?"]}),"\n",(0,s.jsxs)(t.p,{children:["In the J6 processor architecture, all hardware share the DDR memory, and a physically contiguous section of memory can be requested through the ",(0,s.jsx)(t.code,{children:"hbUCPMallocCached"})," and ",(0,s.jsx)(t.code,{children:"hbUCPMalloc"})," interfaczes."]}),"\n",(0,s.jsxs)(t.p,{children:["The return values of these functions are wrapped in the ",(0,s.jsx)(t.code,{children:"hbUCPSysMem"})," data structure,\nand the ",(0,s.jsx)(t.code,{children:"phyAddr"})," and ",(0,s.jsx)(t.code,{children:"virAddr"})," fields correspond to the physical and virtual addresses of its memory space, respectively."]}),"\n",(0,s.jsx)(t.p,{children:"As this memory space is contiguous, both physical and virtual addresses can be represented, read, and written by the first address.\nHowever, in practice, it is recommended to use virtual addresses in preference in non-essential scenarios."}),"\n",(0,s.jsxs)(t.h3,{id:"how-to-understand-cacheable-and-non-cacheable-hbmem",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#how-to-understand-cacheable-and-non-cacheable-hbmem",children:"#"}),"How to understand cacheable and non-cacheable hbmem?"]}),"\n",(0,s.jsxs)(t.p,{children:["UCP's memory management interface provides ",(0,s.jsx)(t.code,{children:"hbUCPMallocCached"})," and ",(0,s.jsx)(t.code,{children:"hbUCPMalloc"})," to allocate DDR read/write memory, which is physically contiguous and can be accessed and used by bpu/dsp and other ip accesses.\nWhere ",(0,s.jsx)(t.code,{children:"hbUCPMallocCached"})," represents the allocation of memory for the cacheable attribute and is accompanied by the ",(0,s.jsx)(t.code,{children:"hbUCPMemFlush"})," function to refresh the Cache."]}),"\n",(0,s.jsx)(t.p,{children:"The cache mechanism is determined by the memory architecture of the platform, as shown in the following figure.\nThe cache between CPU and memory is used as a data cache, however, there is no cache between the BPU/DSP/JPU/VPU(Video Process Unit)/PYRAMID/STITCH/GDC backend hardware and main memory.\nTherefore, the misuse of the cache can cause problems in data reading/writing accuracy and efficiency."}),"\n",(0,s.jsx)("img",{src:i,alt:"runtime_dev_faq",height:"450",width:"450"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"When the CPU has finished writing data, it needs to actively flush the data in the cache to the memory, otherwise other hardware accessing the same memory space may read the old data from before."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"The CPU also needs to actively INVALIDATE the data in the Cache before accessing it when the other backend hardware has finished writing the data, otherwise the CPU will preferentially read the old data previously cached."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"In the continuous inference process of the model, those that need to be read by the cpu, such as the model output, it is recommended to apply for memory with cacheable to accelerate the efficiency of the CPU to read and write repeatedly, while those that don't need to be read, and are only written, such as the model input, can apply for non-cacheable memory."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.h2,{id:"model-inference",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#model-inference",children:"#"}),"Model Inference"]}),"\n",(0,s.jsxs)(t.h3,{id:"what-are-the-possible-causes-of-the-timeout-on-the-hbucpwaittaskdone-interface-for-model-reasoning",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#what-are-the-possible-causes-of-the-timeout-on-the-hbucpwaittaskdone-interface-for-model-reasoning",children:"#"}),"What are the possible causes of the timeout on the hbUCPWaitTaskDone interface for model reasoning?"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The model itself takes a long time to execute, and an insufficient timeout set by the asynchronous wait interface, or a long queuing time for the task due to a high load on the current computational resources, may trigger an interface timeout."}),"\n",(0,s.jsx)(t.li,{children:"Memory leaks exist. Slow allocation of memory in case of insufficient system memory may lead to inference timeout."}),"\n",(0,s.jsx)(t.li,{children:"CPU load is too high. The scheduling thread can't get CPU, at this time, even if the task is completed, it can't be synchronized to the user interface in time, which leads to the reasoning timeout situation."}),"\n"]}),"\n",(0,s.jsxs)(t.h3,{id:"reasons-why-model-inference-gets-stuck",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#reasons-why-model-inference-gets-stuck",children:"#"}),"Reasons why model inference gets stuck"]}),"\n",(0,s.jsxs)(t.p,{children:["Model problem: The underlying running error caused by the model command reason, the error is not reported, resulting in hang. At this point, the bpu task situation can be viewed by ",(0,s.jsx)(t.code,{children:"cat /sys/devices/system/bpu/bpu0/task_running"}),", as shown below:"]}),"\n",(0,s.jsx)("img",{src:o,alt:"task_running",width:"600"}),"\n",(0,s.jsx)(t.p,{children:"If s_time is not null, it means that the task has started normally, while p_time is null, it means that it has not returned normally, which can be assumed that the BPU task hangs, and can be solved by contacting sr or the compiler team."}),"\n",(0,s.jsxs)(t.h3,{id:"what-are-the-roi-input-model-constraints",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#what-are-the-roi-input-model-constraints",children:"#"}),"What are the ROI input model constraints?"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"The size of the original image input to NV12 requires 1 < = Win < = 4096, and the alignment in the W direction requires 32 < = stride < = 131072, and must be a multiple of 32."}),"\n",(0,s.jsx)(t.li,{children:"The size of the ROI is currently set to not exceed the boundaries of the input image; this restriction will be relaxed in subsequent versions."}),"\n",(0,s.jsx)(t.li,{children:"The ROI is represented by the upper left and lower right corner points, the lower right corner point is included in the roi range, and the ROI tensor input coordinates are four values of type int32 for left, top, right, and bottom."}),"\n",(0,s.jsx)(t.li,{children:"The output image size requirement after Resize is 2 < = Wout, 2 < = Hout."}),"\n",(0,s.jsx)(t.li,{children:"The overall requirement for ROI size and output size is currently ROI_w * ROI_h + Wout * Hout < 1.5MB, this limit will be relaxed in subsequent versions."}),"\n",(0,s.jsx)(t.li,{children:"ROI scaling multiplier limit 0 < = step < = 229375, the step formula here is step = (src_len * 65536 + dst_len / 2) / dst_len, where src_len is the W or H of the ROI and the W or H of the output image size after resize."}),"\n"]}),"\n",(0,s.jsxs)(t.h2,{id:"custom-op-development",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#custom-op-development",children:"#"}),"Custom OP Development"]}),"\n",(0,s.jsxs)(t.h3,{id:"dsp-related",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#dsp-related",children:"#"}),"DSP Related"]}),"\n",(0,s.jsxs)(t.h4,{id:"what-are-the-dsp-models-selected-for-the-j6",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#what-are-the-dsp-models-selected-for-the-j6",children:"#"}),"What are the DSP models selected for the J6?"]}),"\n",(0,s.jsxs)(t.p,{children:["The J6 uses Cadence's Tensilica Vision Q8 DSP IP (hereinafter referred to as Q8), a digital signal processor dedicated to vision/image processing, with the number of DSP IPs varying slightly depending on the development board model.\nMore information can be found: ",(0,s.jsx)(t.a,{href:"/3.0.22/en/guide/ucp/plugin/dsp_develop/dsp_intro.html",children:"DSP Development Documentation"})," or ",(0,s.jsx)(t.a,{href:"https://www.cadence.com/en_US/home/tools/ip/tensilica-ip/vision-dsps/vision-p6.html",target:"_blank",rel:"noopener noreferrer",children:"Cadence Official Documentation"}),"\u3002"]}),"\n",(0,s.jsxs)(t.h4,{id:"how-do-to-get-the-official-cadence-documentation",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#how-do-to-get-the-official-cadence-documentation",children:"#"}),"How do to get the official Cadence documentation?"]}),"\n",(0,s.jsxs)(t.p,{children:["Installation steps can be referred to: ",(0,s.jsx)(t.a,{href:"/3.0.22/en/guide/ucp/plugin/dsp_develop/dsp_intro.html",children:"DSP Development Documentation"})," section; After installing the Cadence Development Kit, you can view some of the documentation within the development package. To obtain the complete documentation package, please contact Horizon technical support staff."]}),"\n",(0,s.jsxs)(t.h4,{id:"what-computational-accuracy-does-the-dsp-support",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#what-computational-accuracy-does-the-dsp-support",children:"#"}),"What computational accuracy does the DSP support?"]}),"\n",(0,s.jsx)(t.p,{children:"Support int8/int16/int32 integer calculations, as well as float32 and double floating point calculations."}),"\n",(0,s.jsxs)(t.h4,{id:"how-to-view-the-log-output-on-the-dsp-side",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#how-to-view-the-log-output-on-the-dsp-side",children:"#"}),"How to view the log output on the DSP side?"]}),"\n",(0,s.jsx)(t.p,{children:"In the X86 emulation environment, you can view the log output by modifying the log printing level environment variable HB_DSP_VDSP_LOG_LEVEL when executing the sample script, and the method of setting the log level is the same as that of the UCP, and the modification method, please refer to the contents of the script;"}),"\n",(0,s.jsx)(t.p,{children:"In the development board, you can view the logs on the DSP side by monitoring the log file. The specific method is as follows:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Add the environment variable export HB_DSP_WRITE_VDSP_LOG_TO_ARM=true to enable DSP log output."}),"\n"]}),"\n",(0,s.jsx)(t.pre,{className:"code",children:(0,s.jsx)(t.pre,{className:"shiki css-variables has-line-number",style:{backgroundColor:"var(--shiki-color-background)"},tabIndex:"0",children:(0,s.jsxs)(t.code,{className:"language-bash",meta:"",children:[(0,s.jsxs)(t.span,{className:"line line-number",children:[(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"export"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" HB_DSP_VDSP_LOG_LEVEL"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"3"})]}),"\n",(0,s.jsxs)(t.span,{className:"line line-number",children:[(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"export"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:" HB_DSP_WRITE_DSP_LOG_TO_ARM"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"="}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-constant)"},children:"true"})]}),"\n"]})})}),"\n",(0,s.jsxs)(t.ol,{start:"2",children:["\n",(0,s.jsx)(t.li,{children:"Modify the DSP log printing level environment variable HB_DSP_VDSP_LOG_LEVEL."}),"\n",(0,s.jsx)(t.li,{children:"Use the following command to enable file monitoring."}),"\n"]}),"\n",(0,s.jsx)(t.pre,{className:"code",children:(0,s.jsx)(t.pre,{className:"shiki css-variables has-line-number",style:{backgroundColor:"var(--shiki-color-background)"},tabIndex:"0",children:(0,s.jsxs)(t.code,{className:"language-cpp",meta:"",children:[(0,s.jsxs)(t.span,{className:"line line-number",children:[(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"/"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"usr"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"/"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"hobot"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"/"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"bin"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"/"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"hrut_remoteproc_log "}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"-"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"b "}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"/"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"sys"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-token-keyword)"},children:"/class"}),(0,s.jsx)(t.span,{style:{color:"var(--shiki-color-text)"},children:"/remoteproc/remoteproc1/log"})]}),"\n"]})})}),"\n",(0,s.jsxs)(t.h4,{id:"can-the-dsp-samples-be-run-directly",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#can-the-dsp-samples-be-run-directly",children:"#"}),"Can the DSP samples be run directly?"]}),"\n",(0,s.jsx)(t.p,{children:"It is possible. In the X86 simulation environment, the OE development kit for J6 provides a pre-compiled DSP image in the samples/ucp_tutorial/deps_x86/ucp/bin path.\nIn the VP samples, you can directly execute the build.sh script in the samples/ucp_tutorial/vp/code/ directory to generate the executable file, and then execute the samples/ucp_tutorial/vp/vp_samples/script_x86/01_basic_ processing/run_basic_bin. processing/run_basic_processing.sh to run the sample."}),"\n",(0,s.jsx)(t.p,{children:"On the development board, the samples provide build scripts for the corresponding environments. In the VP sample, you can directly execute the build.sh script in the samples/ucp_tutorial/vp/code/ directory to generate an executable file, and then copy the generated object in the samples/ucp_tutorial/vp/vp_samples/script directory to generate the executable, then copy the build from the samples/ucp_tutorial/vp/vp_samples/script/01_basic_processing/run_basic_processing.sh directory to the development board to run the sample."}),"\n",(0,s.jsx)(t.p,{children:"However, for code development or compiling new images, the DSP development software Xplorer and the corresponding License file are required, which can be obtained by contacting Horizon technical support."})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(h,e)})):h(e)}t.default=c,c.__RSPRESS_PAGE_META={},c.__RSPRESS_PAGE_META["3.0.22%2Fen%2Fguide%2Fucp%2Fucp_faq_errorcode%2Fucp_faq.mdx"]={toc:[{id:"general-issues",text:"General Issues",depth:2},{id:"what-is-the-reason-for-returning-hb_ucp_invalid_argument-error-code-after-task-creation-or-submission",text:"What is the reason for returning HB_UCP_INVALID_ARGUMENT error code after task creation or submission?",depth:3},{id:"how-to-understand-the-physical-and-virtual-addresses-of-hbucpsysmem",text:"How to understand the physical and virtual addresses of hbUCPSysMem?",depth:3},{id:"how-to-understand-cacheable-and-non-cacheable-hbmem",text:"How to understand cacheable and non-cacheable hbmem?",depth:3},{id:"model-inference",text:"Model Inference",depth:2},{id:"what-are-the-possible-causes-of-the-timeout-on-the-hbucpwaittaskdone-interface-for-model-reasoning",text:"What are the possible causes of the timeout on the hbUCPWaitTaskDone interface for model reasoning?",depth:3},{id:"reasons-why-model-inference-gets-stuck",text:"Reasons why model inference gets stuck",depth:3},{id:"what-are-the-roi-input-model-constraints",text:"What are the ROI input model constraints?",depth:3},{id:"custom-op-development",text:"Custom OP Development",depth:2},{id:"dsp-related",text:"DSP Related",depth:3},{id:"what-are-the-dsp-models-selected-for-the-j6",text:"What are the DSP models selected for the J6?",depth:4},{id:"how-do-to-get-the-official-cadence-documentation",text:"How do to get the official Cadence documentation?",depth:4},{id:"what-computational-accuracy-does-the-dsp-support",text:"What computational accuracy does the DSP support?",depth:4},{id:"how-to-view-the-log-output-on-the-dsp-side",text:"How to view the log output on the DSP side?",depth:4},{id:"can-the-dsp-samples-be-run-directly",text:"Can the DSP samples be run directly?",depth:4}],title:"FAQ",frontmatter:{}}},95895:function(e,t,n){n(39710);var s=n(85893),r=n(67294),a=n(45687);n(20388);let i={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"\u5C0F\u4E8E 1 \u5206\u949F"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function o(e,t,n){let s=Object.keys(i).includes(t)?t:n;return i[s](e)}t.Z=e=>{let{defaultLocale:t="en-US"}=e,n=(0,a.Vi)().page.readingTimeData,i=(0,a.Jr)(),h=(0,a.e7)(),[c,d]=(0,r.useState)(o(n,i,t));return(0,r.useEffect)(()=>{d(o(n,i,t))},[i,n]),(0,s.jsx)("span",{"data-dark":String(h),className:"rp-reading-time",children:c})}}}]);