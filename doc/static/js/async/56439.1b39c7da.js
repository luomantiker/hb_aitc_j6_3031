"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["56439"],{7187:function(e,t,r){e.exports=r.p+"static/image/HPL3Component.d7be84c5.png"},56480:function(e,t,r){e.exports=r.p+"static/image/HPL3Flow.797fd87b.png"},26434:function(e,t,r){r.r(t);var s=r(85893),n=r(50065),a=r(95895),i=r(56480),c=r(7187);function o(e){let t=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",img:"img",div:"div",ol:"ol",li:"li"},(0,n.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.h1,{id:"module-architecture",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#module-architecture",children:"#"}),"Module Architecture"]}),"\n",(0,s.jsx)(a.Z,{}),"\n",(0,s.jsxs)(t.h2,{id:"hpl-module-architecture",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#hpl-module-architecture",children:"#"}),"HPL Module Architecture"]}),"\n",(0,s.jsx)("img",{src:c,alt:"HPL1Architecture",width:"900"}),"\n",(0,s.jsx)(t.p,{children:"The task handles for the operators are created through the API in the HPL module, and each operator interface has at least one hardware implementation, such that the fft operator can be executed on DSP hardware and the corresponding backend includes the DSP in the UCP.\nAfter the task handle has been created, you can be deploy the corresponding processing unit by specifying the backend, execution mode, and other parameters through the scheduling parameters.\nIn the entire process from task creation to task committing and releasing,\nthe UCP service layer provides interfaces and functional support for each step."}),"\n",(0,s.jsxs)(t.h2,{id:"operator-execution-process",children:[(0,s.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#operator-execution-process",children:"#"}),"Operator Execution Process"]}),"\n",(0,s.jsx)(t.p,{children:"The FFT_1D operator is used here as an example to show the actual calling method and flow of the operator,\nand the usage of other operators is basically the same as its flow."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"HPL3Flow",src:i})}),"\n",(0,s.jsxs)(t.div,{className:"rspress-directive info",children:[(0,s.jsx)(t.div,{className:"rspress-directive-title",children:"Note"}),(0,s.jsx)(t.div,{className:"rspress-directive-content",children:(0,s.jsx)(t.p,{children:"The dashed box indicates that the step is non-required, which can be omitted by reusing parameters, using default parameters, etc."})})]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Prepare the input and output data: that is applying memory for the data and constructing the associated description."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Create an operator task: this step calls the operator task interface directly, while pass the parameters required for the execution of the operator, the UCP task handle will be output after the execution is completed."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Commit task: commit operator tasks to different processing cores by passing in scheduling parameters, task committing supports specifying the backend, if you do not specify the backend, the system will automatically adapt."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Specify the interface to wait for the end of the task: at the end of the task, the system will return different return values according to the execution status. At this point, you can view the results of the task execution based on the return value."}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Destroy the task: after the successful execution of the task, you need to destroy the task and free the applied memory."}),"\n"]}),"\n"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,n.ah)(),e.components);return t?(0,s.jsx)(t,Object.assign({},e,{children:(0,s.jsx)(o,e)})):o(e)}t.default=h,h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["3.0.22%2Fen%2Fguide%2Fucp%2Fhpl%2Fhpl3_architecture.mdx"]={toc:[{id:"hpl-module-architecture",text:"HPL Module Architecture",depth:2},{id:"operator-execution-process",text:"Operator Execution Process",depth:2}],title:"Module Architecture",frontmatter:{}}},95895:function(e,t,r){r(39710);var s=r(85893),n=r(67294),a=r(45687);r(20388);let i={"zh-CN":e=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${e.minutes>=1?`${Math.ceil(e.minutes)} \u{5206}\u{949F}`:"\u5C0F\u4E8E 1 \u5206\u949F"}`,"en-US":e=>`Estimated reading time: ${e.minutes>=1?`${Math.ceil(e.minutes)} minutes`:"less than 1 minute"}`};function c(e,t,r){let s=Object.keys(i).includes(t)?t:r;return i[s](e)}t.Z=e=>{let{defaultLocale:t="en-US"}=e,r=(0,a.Vi)().page.readingTimeData,i=(0,a.Jr)(),o=(0,a.e7)(),[h,d]=(0,n.useState)(c(r,i,t));return(0,n.useEffect)(()=>{d(c(r,i,t))},[i,r]),(0,s.jsx)("span",{"data-dark":String(o),className:"rp-reading-time",children:h})}}}]);