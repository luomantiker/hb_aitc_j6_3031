"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["16434"],{64186:function(r,s,n){n.r(s);var t=n(85893),i=n(50065),e=n(95895);function x(r){let s=Object.assign({h1:"h1",a:"a",div:"div",p:"p",pre:"pre",code:"code",span:"span"},(0,i.ah)(),r.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(s.h1,{id:"torch\u7B97\u5B50bpu\u7EA6\u675F\u5217\u8868",children:[(0,t.jsx)(s.a,{className:"header-anchor","aria-hidden":"true",href:"#torch\u7B97\u5B50bpu\u7EA6\u675F\u5217\u8868",children:"#"}),"Torch\u7B97\u5B50BPU\u7EA6\u675F\u5217\u8868"]}),"\n",(0,t.jsx)(e.Z,{}),"\n",(0,t.jsxs)(s.div,{className:"rspress-directive warning",children:[(0,t.jsx)(s.div,{className:"rspress-directive-title",children:"\u6CE8\u610F"}),(0,t.jsxs)(s.div,{className:"rspress-directive-content",children:[(0,t.jsx)(s.p,{children:"\u4E0B\u65B9\u9ED8\u8BA4\u8FDB\u884C\u4E86\u5982\u4E0B\u522B\u540D\u66FF\u6362\uFF1A"}),(0,t.jsx)(s.pre,{className:"code",children:(0,t.jsx)(s.pre,{className:"shiki css-variables has-line-number",style:{backgroundColor:"var(--shiki-color-background)"},tabIndex:"0",children:(0,t.jsxs)(s.code,{className:"language-python",meta:"",children:[(0,t.jsxs)(s.span,{className:"line line-number",children:[(0,t.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"import"}),(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" horizon_plugin_pytorch "}),(0,t.jsx)(s.span,{style:{color:"var(--shiki-token-keyword)"},children:"as"}),(0,t.jsx)(s.span,{style:{color:"var(--shiki-color-text)"},children:" horizon"})]}),"\n"]})})})]})]}),"\n",(0,t.jsx)(s.p,{children:"\u4E0B\u65B9\u8868\u683C\u4E2D\uFF1A"}),"\n",(0,t.jsx)(s.p,{children:"lhs\uFF1Aleft-hand side\uFF0C\u6307\u8FD0\u7B97\u4E2D\u7684\u5DE6\u64CD\u4F5C\u6570\u3002"}),"\n",(0,t.jsx)(s.p,{children:"rhs\uFF1Aright-hand side\uFF0C\u6307\u8FD0\u7B97\u4E2D\u7684\u53F3\u64CD\u4F5C\u6570\u3002"}),"\n",(0,t.jsx)("div",{className:"table-container",children:(0,t.jsxs)("table",{className:"scrollable-table",children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Torch Operator"}),(0,t.jsx)("th",{children:"Eager Mode Operator"}),(0,t.jsx)("th",{children:"Map Description & Graph Fusion Description"}),(0,t.jsx)("th",{children:"HBIR Operator Name"}),(0,t.jsx)("th",{children:"BPU Support Constraints"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.abs",(0,t.jsx)("br",{}),"torch.Tensor.abs"]}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.abs"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.abs"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.acos"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Acos"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.acosh"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Acosh"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"3",children:["torch.add",(0,t.jsx)("br",{}),"torch.Tensor.add"]}),(0,t.jsxs)("td",{rowSpan:"3",children:["torch.nn.quantized.FloatFunctional  OR ",(0,t.jsx)("br",{}),"horizon.nn.quantized.FloatFunctional"]}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002alpha\u2002==\u20021:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.add"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.add"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32, if type is int32, this hbir.add op must be fusible to a Conv op",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002alpha\u2002!=\u20021:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.mul"(%arg1,\u2002%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.add"(%arg0,\u2002%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.add"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32, if type is int32, this hbir.add op must be fusible to a Conv op",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.argmax",(0,t.jsx)("br",{}),"torch.Tensor.argmax"]}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reduce_argmax"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.reduce_argmax"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.argmin",(0,t.jsx)("br",{}),"torch.Tensor.argmin"]}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reduce_argmin"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.reduce_argmin"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.asin"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Asin"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"3",children:"torch.asinh"}),(0,t.jsx)("td",{rowSpan:"3",children:"horizon.nn.Asinh"}),(0,t.jsxs)("td",{rowSpan:"3",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.max"(%arg0,\u2002%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.clip"(%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.quantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"b30.lut"(%3,\u2002%4)',(0,t.jsx)("br",{}),'\u2002\u2002%6\u2002=\u2002"qnt.dequantize"(%5)',(0,t.jsx)("br",{}),'\u2002\u2002%7\u2002=\u2002"qnt.const_fake_quant"(%6)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%7",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.clip"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.max"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.atan"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Atan"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.atanh"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Atan"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.ceil"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Ceil"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"3",children:["torch.clamp",(0,t.jsx)("br",{}),"torch.clip",(0,t.jsx)("br",{}),"torch.Tensor.clamp",(0,t.jsx)("br",{}),"torch.Tensor.clip"]}),(0,t.jsx)("td",{rowSpan:"3",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002isinstance(args,\u2002scalar):",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0,\u2002%arg1,\u2002%arg2){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.clip"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.clip"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002isinstance(args,\u2002Tensor):",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0,\u2002%arg1,\u2002%arg2){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.max"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.min"(%0,\u2002%arg2)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%1",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.min"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.max"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.cat",(0,t.jsx)("br",{}),"torch.concat",(0,t.jsx)("br",{}),"torch.concatenate"]}),(0,t.jsxs)("td",{rowSpan:"1",children:["torch.nn.quantized.FloatFunctional  OR ",(0,t.jsx)("br",{}),"horizon.nn.quantized.FloatFunctional"]}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.concat"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.concat"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Arg Number: input number \u2208 [1, 1024]",(0,t.jsx)("br",{}),"Dim: all dims < 131072 ",(0,t.jsx)("br",{}),"size < 2G",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.cos"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Cos"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.cosh"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Cosh"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"2",children:"torch.div"}),(0,t.jsx)("td",{rowSpan:"2",children:"horizon.nn.Div"}),(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg1)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"hbir.mul"(%arg0,\u2002%4)',(0,t.jsx)("br",{}),'\u2002\u2002%6\u2002=\u2002"qnt.const_fake_quant"(%5)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%6",(0,t.jsx)("br",{}),"}",(0,t.jsx)("br",{}),"else:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.div"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.eq",(0,t.jsx)("br",{}),"torch.Tensor.eq"]}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.equal"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.equal"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16, bool8",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: bool8",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.gt",(0,t.jsx)("br",{}),"torch.greater",(0,t.jsx)("br",{}),"torch.Tensor.gt",(0,t.jsx)("br",{}),"torch.Tensor.greater"]}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.greater"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.greater"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: bool8",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.lt",(0,t.jsx)("br",{}),"torch.less",(0,t.jsx)("br",{}),"torch.Tensor.lt",(0,t.jsx)("br",{}),"torch.Tensor.less"]}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.less"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.less"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: bool8",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.erf"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Erf"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.exp"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Exp"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"2",children:"torch.Tensor.expand"}),(0,t.jsx)("td",{rowSpan:"2",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002%0\u2002=\u2002"hbir.reshape"(%arg0)',(0,t.jsx)("br",{}),'\u2002%1\u2002=\u2002"hbir.concat"(%0,\u2002%0,\u2002%0)',(0,t.jsx)("br",{}),"\u2002return\u2002%1",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.concat"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Arg Number: input number \u2208 [1, 1024]",(0,t.jsx)("br",{}),"Dim: all dims < 131072 ",(0,t.jsx)("br",{}),"size < 2G",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.flatten",(0,t.jsx)("br",{}),"torch.Tensor.flatten"]}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reshape"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.flip",(0,t.jsx)("br",{}),"torch.Tensor.flip"]}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.flip"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.flip"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.floor"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Floor"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.index_select",(0,t.jsx)("br",{}),"torch.Tensor.index_select"]}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.index"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.index"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: dims \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"index:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32, int64",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input except Dim constraints",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.log"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.HardLog"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.logical_and"}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.logical_and"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.logical_and"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16, bool8",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: bool8",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.logical_not"}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.logical_not"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.logical_not"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16, bool8",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: bool8",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.Tensor.masked_fill"}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.where"(%0,\u2002%1,\u2002%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.where"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"condition:"}),(0,t.jsx)("br",{}),"Type: bool8",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.matmul"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.quantized.FloatFunctional"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.matmul"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.matmul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16; lhs and rhs cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,M,C]",(0,t.jsx)("br",{}),"Dim: * \u2208 [1, 4096], M,C \u2208 [1, 8192]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16; lhs and rhs cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,C,N]",(0,t.jsx)("br",{}),"Dim: * \u2208 [1, 4096]; C,N \u2208 [1, 8192]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32",(0,t.jsx)("br",{}),"Shape: [*,M,N]",(0,t.jsx)("br",{}),"Other constraints: Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"3",children:["torch.max",(0,t.jsx)("br",{}),"torch.Tensor.max"]}),(0,t.jsx)("td",{rowSpan:"3",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002dim\u2002is\u2002not\u2002None:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reduce_max"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.reduce_argmax"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.reduce_argmax"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reduce_max"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002dim\u2002is\u2002None:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reduce_max"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.reduce_max"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.maximum"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.quantized.FloatFunctional"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.max"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.max"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.mean"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.quantized.FloatFunctional"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reduce_mean"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.reduce_mean"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"3",children:["torch.min",(0,t.jsx)("br",{}),"torch.Tensor.min"]}),(0,t.jsx)("td",{rowSpan:"3",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002dim\u2002is\u2002not\u2002None:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reduce_min"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.reduce_argmin"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.reduce_min"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reduce_argmin"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002dim\u2002is\u2002None:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reduce_min"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.reduce_min"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.minimum"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.quantized.FloatFunctional"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002%0\u2002=\u2002"hbir.min"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.min"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.mul",(0,t.jsx)("br",{}),"torch.Tensor.mul"]}),(0,t.jsxs)("td",{rowSpan:"1",children:["torch.nn.quantized.FloatFunctional or ",(0,t.jsx)("br",{}),"horizon.nn.quantized.FloatFunctional"]}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.mul"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.neg",(0,t.jsx)("br",{}),"torch.negative",(0,t.jsx)("br",{}),"torch.Tensor.neg",(0,t.jsx)("br",{}),"torch.Tensor.negative"]}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%0\u2002=\u2002"hbir.neg"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"\u2002\u2002}"]}),(0,t.jsx)("td",{children:"hbir.neg"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.permute",(0,t.jsx)("br",{}),"torch.Tensor.permute"]}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"3",children:"torch.pow"}),(0,t.jsx)("td",{rowSpan:"3",children:"horizon.nn.Pow"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002exponent\u2002!=\u20022\u2002and\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002exponent\u2002==\u20022:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.mul"(%arg0,\u2002%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}",(0,t.jsx)("br",{})]}),(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002exponent\u2002!=\u20022\u2002and\u2002float:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.pow"(%arg0,\u2002%0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%1",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.pow"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.reciprocal"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Reciprocal"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.repeat",(0,t.jsx)("br",{}),"torch.Tensor.repeat"]}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.tile"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.tile"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.reshape",(0,t.jsx)("br",{}),"torch.Tensor.reshape",(0,t.jsx)("br",{}),"torch.view",(0,t.jsx)("br",{}),"torch.Tensor.view"]}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reshape"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.sin"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Sin"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.sinh"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Sinh"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.split"}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.slice"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.slice"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.slice"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.slice"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0,\u2002%1,\u2002%2,\u2002%3",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.slice"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Dim: all dims < 2097152 ",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"3",children:"torch.sqrt"}),(0,t.jsx)("td",{rowSpan:"3",children:"horizon.nn.Sqrt"}),(0,t.jsxs)("td",{rowSpan:"3",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.max"(%arg0,\u2002%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.clip"(%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.quantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"b30.lut"(%3,\u2002%4)',(0,t.jsx)("br",{}),'\u2002\u2002%6\u2002=\u2002"qnt.dequantize"(%5)',(0,t.jsx)("br",{}),'\u2002\u2002%7\u2002=\u2002"qnt.const_fake_quant"(%6)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%7",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.clip"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.max"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.squeeze",(0,t.jsx)("br",{}),"torch.Tensor.squeeze"]}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reshape"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"3",children:"torch.sub"}),(0,t.jsx)("td",{rowSpan:"3",children:"horizon.nn.quantized.FloatFunctional"}),(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002alpha\u2002!=\u20021:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002%1\u2002=\u2002"hbir.mul"(%arg1,\u2002%0)',(0,t.jsx)("br",{}),'\u2002%2\u2002=\u2002"hbir.sub"(%arg0,\u2002%1)',(0,t.jsx)("br",{}),"\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.sub"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002alpha\u2002==\u20021:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.sub"(%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.sub"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.sum"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.quantized.FloatFunctional"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reduce_sum"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.reduce_sum"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.tan"}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Tan"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.tile",(0,t.jsx)("br",{}),"torch.Tensor.tile"]}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.tile"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.tile"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.transpose",(0,t.jsx)("br",{}),"torch.Tensor.transpose"]}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.tril"}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.where"(%0,\u2002%arg0,\u20021)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.where"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"condition:"}),(0,t.jsx)("br",{}),"Type: bool8",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.triu"}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.where"(%0,\u2002%arg0,\u20021)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.where"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"condition:"}),(0,t.jsx)("br",{}),"Type: bool8",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.unsqueeze",(0,t.jsx)("br",{}),"torch.Tensor.unsqueeze"]}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reshape"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.where",(0,t.jsx)("br",{}),"torch.Tensor.where"]}),(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.Where"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.where"(%0,\u2002%arg0,\u2002%arg1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%1",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.where"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"condition:"}),(0,t.jsx)("br",{}),"Type: bool8",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.zeros_like",(0,t.jsx)("br",{}),"torch.ones_like",(0,t.jsx)("br",{}),"torch.full_like",(0,t.jsx)("br",{}),"torch.rand_like"]}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.constant"}),(0,t.jsxs)("td",{children:["No limits",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"6",children:"torch.linalg.norm"}),(0,t.jsx)("td",{rowSpan:"6",children:"horizon.nn.LinalgNorm"}),(0,t.jsxs)("td",{rowSpan:"3",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.const_fake_quant"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.mul"(%0,\u2002%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"qnt.const_fake_quant"(%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.reduce_sum"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"qnt.quantize"(%4)',(0,t.jsx)("br",{}),'\u2002\u2002%6\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%7\u2002=\u2002"b30.lut"(%5,\u2002%6)',(0,t.jsx)("br",{}),'\u2002\u2002%8\u2002=\u2002"qnt.dequantize"(%7)',(0,t.jsx)("br",{}),'\u2002\u2002%9\u2002=\u2002"qnt.const_fake_quant"(%8)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%9",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reduce_sum"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"3",children:["if\u2002float:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.mul"(%arg0,\u2002%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.reduce_sum"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.sqrt"(%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%3",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.sqrt"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reduce_sum"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["torch.nn.functional.adaptive_avg_pool1d",(0,t.jsx)("br",{}),"torch.nn.AdaptiveAvgPool1d"]}),(0,t.jsx)("td",{rowSpan:"2",children:"torch.nn.AdaptiveAvgPool1d"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reshape"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.avg_pool2d"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.reshape"(%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.avg_pool2d"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["torch.nn.functional.adaptive_avg_pool2d",(0,t.jsx)("br",{}),"torch.nn.AdaptiveAvgPool2d"]}),(0,t.jsx)("td",{rowSpan:"2",children:"torch.nn.AdaptiveAvgPool2d"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.avg_pool2d"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.transpose"(%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.avg_pool2d"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"3",children:"torch.nn.functional.affine_grid"}),(0,t.jsx)("td",{rowSpan:"3",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"3",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.matmul"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.reshape"(%2)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%3",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.matmul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16; lhs and rhs cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,M,C]",(0,t.jsx)("br",{}),"Dim: * \u2208 [1, 4096], M,C \u2208 [1, 8192]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16; lhs and rhs cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,C,N]",(0,t.jsx)("br",{}),"Dim: * \u2208 [1, 4096]; C,N \u2208 [1, 8192]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32",(0,t.jsx)("br",{}),"Shape: [*,M,N]",(0,t.jsx)("br",{}),"Other constraints: Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["torch.nn.functional.avg_pool2d",(0,t.jsx)("br",{}),"torch.nn.AvgPool2d"]}),(0,t.jsx)("td",{rowSpan:"2",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.avg_pool2d"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.transpose"(%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.avg_pool2d"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"2",children:"torch.nn.Embedding"}),(0,t.jsx)("td",{rowSpan:"2"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%1\u2002=\u2002"hbir.reshape"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%2\u2002=\u2002"hbir.gather_nd"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%3\u2002=\u2002"hbir.reshape"(%2)',(0,t.jsx)("br",{}),"\u2002\u2002\u2002\u2002return\u2002%3",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.gather_nd"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.nn.functional.gelu",(0,t.jsx)("br",{}),"torch.nn.GELU"]}),(0,t.jsx)("td",{rowSpan:"1",children:"torch.nn.GELU"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"3",children:["torch.nn.functional.glu",(0,t.jsx)("br",{}),"torch.nn.GLU"]}),(0,t.jsx)("td",{rowSpan:"3",children:"torch.nn.GLU"}),(0,t.jsxs)("td",{rowSpan:"3",children:["module\u2002{",(0,t.jsx)("br",{}),"\u2002\u2002func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%0\u2002=\u2002"qnt.const_fake_quant"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%1\u2002=\u2002"hbir.slice"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%2\u2002=\u2002"hbir.slice"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%3\u2002=\u2002"qnt.quantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%4\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%5\u2002=\u2002"b30.lut"(%3,\u2002%4)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%6\u2002=\u2002"qnt.dequantize"(%5)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%7\u2002=\u2002"qnt.const_fake_quant"(%6)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%8\u2002=\u2002"hbir.mul"(%1,\u2002%7)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%9\u2002=\u2002"qnt.const_fake_quant"(%8)',(0,t.jsx)("br",{}),"\u2002\u2002\u2002\u2002return\u2002%9",(0,t.jsx)("br",{}),"\u2002\u2002}",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.slice"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Dim: all dims < 2097152 ",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"2",children:"torch.nn.functional.grid_sample"}),(0,t.jsx)("td",{rowSpan:"2",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.grid_sample"(%0,\u2002%arg1)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.transpose"(%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.grid_sample"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8",(0,t.jsx)("br",{}),"Shape: [*,H,W,C]",(0,t.jsx)("br",{}),"Dim: H,W \u2208 [1, 1024]; H*W \u2264 720*1024; other dims \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"grid:"}),(0,t.jsx)("br",{}),"Type: int16",(0,t.jsx)("br",{}),"Shape: [*,H,W,2]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input except Dim constraints",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.nn.functional.hardsigmoid",(0,t.jsx)("br",{}),"torch.nn.HardSigmoid"]}),(0,t.jsx)("td",{rowSpan:"1",children:"torch.nn.HardSigmoid"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["torch.nn.functional.interpolate",(0,t.jsx)("br",{}),"torch.nn.Upsample",(0,t.jsx)("br",{}),"torch.nn.UpsamplingNearest2d",(0,t.jsx)("br",{}),"torch.nn.UpsamplingBilinear2d"]}),(0,t.jsx)("td",{rowSpan:"2",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.resize2d"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.transpose"(%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.resize2d"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8",(0,t.jsx)("br",{}),"Shape: [*,H,W,C]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.nn.functional.leaky_relu",(0,t.jsx)("br",{}),"torch.nn.LeakyReLU"]}),(0,t.jsx)("td",{rowSpan:"1",children:"torch.nn.LeakyReLU"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.nn.functional.pad",(0,t.jsx)("br",{}),"torch.nn.ConstantPad1d",(0,t.jsx)("br",{}),"torch.nn.ConstantPad2d",(0,t.jsx)("br",{}),"torch.nn.ConstantPad3d",(0,t.jsx)("br",{}),"torch.nn.ReplicationPad1d",(0,t.jsx)("br",{}),"torch.nn.ReplicationPad2d",(0,t.jsx)("br",{}),"torch.nn.ReplicationPad3d",(0,t.jsx)("br",{}),"torch.nn.ZeroPad2d"]}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.pad"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.pad"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int64, uint64 and f64 are not supported when expansionMode is 'constant' else no constraints",(0,t.jsx)("br",{}),"Dim: all dims < 737280 when expansionMode is not 'constant' else no constraints",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"begin/end:"}),(0,t.jsx)("br",{}),"Value should be in range [1, 4096]",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["torch.nn.functional.pixel_shuffle",(0,t.jsx)("br",{}),"torch.nn.PixelShuffle"]}),(0,t.jsx)("td",{rowSpan:"2",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reshape"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.transpose"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.reshape"(%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["torch.nn.functional.pixel_unshuffle",(0,t.jsx)("br",{}),"torch.nn.PixelUnshuffle"]}),(0,t.jsx)("td",{rowSpan:"2",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.reshape"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.transpose"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.reshape"(%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"3",children:["torch.nn.functional.prelu",(0,t.jsx)("br",{}),"torch.nn.PReLU"]}),(0,t.jsx)("td",{rowSpan:"3",children:"torch.nn.PReLU"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002isinstance(weight,\u2002scalar):",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.prelu"(%arg0,\u2002%0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%1",(0,t.jsx)("br",{}),"}",(0,t.jsx)("br",{})]}),(0,t.jsx)("td",{children:"hbir.prelu"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002not\u2002isinstance(weight,\u2002scalar):",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.prelu"(%1,\u2002%0)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.transpose"(%2)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%3",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.prelu"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.nn.functional.relu",(0,t.jsx)("br",{}),"torch.nn.ReLU"]}),(0,t.jsx)("td",{rowSpan:"1",children:"torch.nn.ReLU"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.relu"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.relu"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.nn.functional.relu6(fused)",(0,t.jsx)("br",{}),"torch.nn.ReLU6(fused)"]}),(0,t.jsx)("td",{rowSpan:"1",children:"torch.nn.ReLU6"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.clip"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.clip"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.nn.functional.silu",(0,t.jsx)("br",{}),"torch.nn.SiLU"]}),(0,t.jsx)("td",{rowSpan:"1",children:"torch.nn.SiLU"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"7",children:["torch.nn.functional.softmax",(0,t.jsx)("br",{}),"torch.nn.Softmax"]}),(0,t.jsx)("td",{rowSpan:"7",children:"torch.nn.Softmax"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002float:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0)\u2002{",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.softmax"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.softmax"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"6",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.cast_type"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.reduce_max"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.reduce_argmax"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.sub"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"qnt.quantize"(%4)',(0,t.jsx)("br",{}),'\u2002\u2002%6\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%7\u2002=\u2002"b30.lut"(%5,\u2002%6)',(0,t.jsx)("br",{}),'\u2002\u2002%8\u2002=\u2002"qnt.dequantize"(%7)',(0,t.jsx)("br",{}),'\u2002\u2002%9\u2002=\u2002"qnt.const_fake_quant"(%8)',(0,t.jsx)("br",{}),'\u2002\u2002%10\u2002=\u2002"hbir.reduce_sum"(%9)',(0,t.jsx)("br",{}),'\u2002\u2002%11\u2002=\u2002"qnt.const_fake_quant"(%10)',(0,t.jsx)("br",{}),'\u2002\u2002%12\u2002=\u2002"qnt.quantize"(%11)',(0,t.jsx)("br",{}),'\u2002\u2002%13\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%14\u2002=\u2002"b30.lut"(%12,\u2002%13)',(0,t.jsx)("br",{}),'\u2002\u2002%15\u2002=\u2002"qnt.dequantize"(%14)',(0,t.jsx)("br",{}),'\u2002\u2002%16\u2002=\u2002"qnt.const_fake_quant"(%15)',(0,t.jsx)("br",{}),'\u2002\u2002%17\u2002=\u2002"hbir.mul"(%9,\u2002%16)',(0,t.jsx)("br",{}),'\u2002\u2002%18\u2002=\u2002"qnt.const_fake_quant"(%17)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%18",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.sub"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reduce_sum"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reduce_argmax"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reduce_max"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.nn.functional.softplus",(0,t.jsx)("br",{}),"torch.nn.Softplus"]}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"2",children:"torch.nn.BatchNorm2d"}),(0,t.jsx)("td",{rowSpan:"2",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"hbir.batchnorm"(%4,\u2002%0,\u2002%1,\u2002%2,\u2002%3)',(0,t.jsx)("br",{}),'\u2002\u2002%6\u2002=\u2002"hbir.transpose"(%5)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%6",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.batchnorm"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*,H,W,C]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"mean:"}),(0,t.jsx)("br",{}),"Type: f32",(0,t.jsx)("br",{}),"Shape: [C]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"var:"}),(0,t.jsx)("br",{}),"Type: f32",(0,t.jsx)("br",{}),"Shape: [C]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"weight:"}),(0,t.jsx)("br",{}),"Type: f32",(0,t.jsx)("br",{}),"Shape: [C]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"bias:"}),(0,t.jsx)("br",{}),"Type: f32",(0,t.jsx)("br",{}),"Shape: [C]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"4",children:"torch.nn.Conv2d"}),(0,t.jsx)("td",{rowSpan:"4",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"qnt.const_fake_quant"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"hbir.transpose"(%1)',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"hbir.conv2d"(%3,\u2002%4,\u2002%2)',(0,t.jsx)("br",{}),'\u2002\u2002%6\u2002=\u2002"hbir.transpose"(%5)',(0,t.jsx)("br",{}),'\u2002\u2002%7\u2002=\u2002"qnt.const_fake_quant"(%6)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%7",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.conv2d"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16; input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,H,W,C]",(0,t.jsx)("br",{}),"Dim: * \u2208 [1, 4096]; H,W,C \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"weight:"}),(0,t.jsx)("br",{}),"Type: int8, int16; input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [N,KH,KW,C]",(0,t.jsx)("br",{}),"Dim: C \u2208 [1, 8192]; KH,KW \u2208 [1, 31]; N \u2208 [1, 65536] if fout is the last layer of conv else [1, 8192]",(0,t.jsx)("br",{}),"Size: KH \xd7 KW \xd7 C \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"bias:"}),(0,t.jsx)("br",{}),"Type: f32",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32",(0,t.jsx)("br",{}),"Other constraints: Same as fin",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"stride:"}),(0,t.jsx)("br",{}),"Shape: [SH,SW]",(0,t.jsx)("br",{}),"Dim: SH,SW \u2208 [1, 256]; SH,SW \u2208 {1} if dilation > 1",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"pad:"}),(0,t.jsx)("br",{}),"Shape: [P_top,P_left,P_bottom,P_right]",(0,t.jsx)("br",{}),"Dim: P_top,P_bottom \u2208 [-H/2, 256], P_left,P_right \u2208 [-W/2, 256]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"groupNum:"}),(0,t.jsx)("br",{}),"fin.c is divisible by group number",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"dilation:"}),(0,t.jsx)("br",{}),"Shape: [DH,DW]",(0,t.jsx)("br",{}),"Dim: DH,DW \u2208 [1, 18]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"others:"}),(0,t.jsx)("br",{}),"Stride only support odd number and 2 when conv is a int16 depthwise conv",(0,t.jsx)("br",{}),"For each group, fin.c \u2208 [1, 8192], KH \xd7 KW \xd7 fin.c \u2208 [1, 65535], fin.c = C when group = 1",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002float:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.transpose"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"hbir.conv2d"(%2,\u2002%3,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"hbir.transpose"(%4)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%5",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.conv2d"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16; input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,H,W,C]",(0,t.jsx)("br",{}),"Dim: * \u2208 [1, 4096]; H,W,C \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"weight:"}),(0,t.jsx)("br",{}),"Type: int8, int16; input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [N,KH,KW,C]",(0,t.jsx)("br",{}),"Dim: C \u2208 [1, 8192]; KH,KW \u2208 [1, 31]; N \u2208 [1, 65536] if fout is the last layer of conv else [1, 8192]",(0,t.jsx)("br",{}),"Size: KH \xd7 KW \xd7 C \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"bias:"}),(0,t.jsx)("br",{}),"Type: f32",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32",(0,t.jsx)("br",{}),"Other constraints: Same as fin",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"stride:"}),(0,t.jsx)("br",{}),"Shape: [SH,SW]",(0,t.jsx)("br",{}),"Dim: SH,SW \u2208 [1, 256]; SH,SW \u2208 {1} if dilation > 1",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"pad:"}),(0,t.jsx)("br",{}),"Shape: [P_top,P_left,P_bottom,P_right]",(0,t.jsx)("br",{}),"Dim: P_top,P_bottom \u2208 [-H/2, 256], P_left,P_right \u2208 [-W/2, 256]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"groupNum:"}),(0,t.jsx)("br",{}),"fin.c is divisible by group number",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"dilation:"}),(0,t.jsx)("br",{}),"Shape: [DH,DW]",(0,t.jsx)("br",{}),"Dim: DH,DW \u2208 [1, 18]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"others:"}),(0,t.jsx)("br",{}),"Stride only support odd number and 2 when conv is a int16 depthwise conv",(0,t.jsx)("br",{}),"For each group, fin.c \u2208 [1, 8192], KH \xd7 KW \xd7 fin.c \u2208 [1, 65535], fin.c = C when group = 1",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"4",children:"torch.nn.ConvTranspose2d"}),(0,t.jsx)("td",{rowSpan:"4",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002float:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.transpose"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"hbir.conv2dtranspose"(%2,\u2002%3,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"hbir.transpose"(%4)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%5",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.conv2dtranspose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16; input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,H,W,C]",(0,t.jsx)("br",{}),"Dim: * \u2208 [1, 128]; H,W \u2208 [1, 65536]; C \u2208 [1, 2048]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"weight:"}),(0,t.jsx)("br",{}),"Type: int8, int16; input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [N,KH,KW,C]",(0,t.jsx)("br",{}),"Dim: N,C \u2208 [1, 2048]; KH,KW \u2208 [1, 14]; KH,KW cannot both be 1",(0,t.jsx)("br",{}),"Size: KH \xd7 KW \xd7 C \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"bias:"}),(0,t.jsx)("br",{}),"Type: f32",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, the type additionally supports int32",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"stride:"}),(0,t.jsx)("br",{}),"Shape: [SH,SW]",(0,t.jsx)("br",{}),"Dim: SH,SW \u2208 [1, 14]; SH < KH; SW < KW;",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"pad:"}),(0,t.jsx)("br",{}),"Shape: [P_top,P_left,P_bottom,P_right]",(0,t.jsx)("br",{}),"Dim: P_top,P_left,P_bottom,P_right \u2208 [0, 256]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"dilation:"}),(0,t.jsx)("br",{}),"Shape: [DH,DW]",(0,t.jsx)("br",{}),"Dim: DH,DW \u2208 {1}",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"qnt.const_fake_quant"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.reshape"(%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.transpose"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"hbir.reshape"(%3)',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%6\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%7\u2002=\u2002"hbir.transpose"(%4)',(0,t.jsx)("br",{}),'\u2002\u2002%8\u2002=\u2002"hbir.conv2dtranspose"(%6,\u2002%7,\u2002%5)',(0,t.jsx)("br",{}),'\u2002\u2002%9\u2002=\u2002"hbir.transpose"(%8)',(0,t.jsx)("br",{}),'\u2002\u2002%10\u2002=\u2002"qnt.const_fake_quant"(%9)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%10",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.conv2dtranspose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16; input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,H,W,C]",(0,t.jsx)("br",{}),"Dim: * \u2208 [1, 128]; H,W \u2208 [1, 65536]; C \u2208 [1, 2048]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"weight:"}),(0,t.jsx)("br",{}),"Type: int8, int16; input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [N,KH,KW,C]",(0,t.jsx)("br",{}),"Dim: N,C \u2208 [1, 2048]; KH,KW \u2208 [1, 14]; KH,KW cannot both be 1",(0,t.jsx)("br",{}),"Size: KH \xd7 KW \xd7 C \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"bias:"}),(0,t.jsx)("br",{}),"Type: f32",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, the type additionally supports int32",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"stride:"}),(0,t.jsx)("br",{}),"Shape: [SH,SW]",(0,t.jsx)("br",{}),"Dim: SH,SW \u2208 [1, 14]; SH < KH; SW < KW;",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"pad:"}),(0,t.jsx)("br",{}),"Shape: [P_top,P_left,P_bottom,P_right]",(0,t.jsx)("br",{}),"Dim: P_top,P_left,P_bottom,P_right \u2208 [0, 256]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"dilation:"}),(0,t.jsx)("br",{}),"Shape: [DH,DW]",(0,t.jsx)("br",{}),"Dim: DH,DW \u2208 {1}",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"6",children:["torch.nn.LayerNorm",(0,t.jsx)("br",{}),"torch.nn.InstanceNorm2d"]}),(0,t.jsx)("td",{rowSpan:"6",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002float:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002\u2002%0\u2002=\u2002"hbir.layernorm"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.layernorm"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"5",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.cast_type"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.reduce_mean"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"qnt.const_fake_quant"(%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.sub"(%0,\u2002%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"hbir.mul"(%4,\u2002%4)',(0,t.jsx)("br",{}),'\u2002\u2002%6\u2002=\u2002"qnt.const_fake_quant"(%5)',(0,t.jsx)("br",{}),'\u2002\u2002%7\u2002=\u2002"hbir.reduce_mean"(%6)',(0,t.jsx)("br",{}),'\u2002\u2002%8\u2002=\u2002"qnt.const_fake_quant"(%7)',(0,t.jsx)("br",{}),'\u2002\u2002%9\u2002=\u2002"qnt.quantize"(%8)',(0,t.jsx)("br",{}),'\u2002\u2002%10\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%11\u2002=\u2002"b30.lut"(%9,\u2002%10)',(0,t.jsx)("br",{}),'\u2002\u2002%12\u2002=\u2002"qnt.dequantize"(%11)',(0,t.jsx)("br",{}),'\u2002\u2002%13\u2002=\u2002"qnt.const_fake_quant"(%12)',(0,t.jsx)("br",{}),'\u2002\u2002%14\u2002=\u2002"hbir.mul"(%4,\u2002%13)',(0,t.jsx)("br",{}),'\u2002\u2002%15\u2002=\u2002"qnt.const_fake_quant"(%14)',(0,t.jsx)("br",{}),'\u2002\u2002%16\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%17\u2002=\u2002"qnt.const_fake_quant"(%16)',(0,t.jsx)("br",{}),'\u2002\u2002%18\u2002=\u2002"hbir.mul"(%15,\u2002%17)',(0,t.jsx)("br",{}),'\u2002\u2002%19\u2002=\u2002"qnt.const_fake_quant"(%18)',(0,t.jsx)("br",{}),'\u2002\u2002%20\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%21\u2002=\u2002"qnt.const_fake_quant"(%20)',(0,t.jsx)("br",{}),'\u2002\u2002%22\u2002=\u2002"hbir.add"(%19,\u2002%21)',(0,t.jsx)("br",{}),'\u2002\u2002%23\u2002=\u2002"qnt.const_fake_quant"(%22)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%23",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.add"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32, if type is int32, this hbir.add op must be fusible to a Conv op",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.sub"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reduce_mean"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"11",children:"horizon.nn.LayerNorm"}),(0,t.jsx)("td",{rowSpan:"11",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"5",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.cast_type"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.reduce_mean"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"qnt.const_fake_quant"(%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.sub"(%0,\u2002%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"hbir.mul"(%4,\u2002%4)',(0,t.jsx)("br",{}),'\u2002\u2002%6\u2002=\u2002"qnt.const_fake_quant"(%5)',(0,t.jsx)("br",{}),'\u2002\u2002%7\u2002=\u2002"hbir.reduce_mean"(%6)',(0,t.jsx)("br",{}),'\u2002\u2002%8\u2002=\u2002"qnt.const_fake_quant"(%7)',(0,t.jsx)("br",{}),'\u2002\u2002%9\u2002=\u2002"qnt.quantize"(%8)',(0,t.jsx)("br",{}),'\u2002\u2002%10\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%11\u2002=\u2002"b30.lut"(%9,\u2002%10)',(0,t.jsx)("br",{}),'\u2002\u2002%12\u2002=\u2002"qnt.dequantize"(%11)',(0,t.jsx)("br",{}),'\u2002\u2002%13\u2002=\u2002"qnt.const_fake_quant"(%12)',(0,t.jsx)("br",{}),'\u2002\u2002%14\u2002=\u2002"hbir.mul"(%4,\u2002%13)',(0,t.jsx)("br",{}),'\u2002\u2002%15\u2002=\u2002"qnt.const_fake_quant"(%14)',(0,t.jsx)("br",{}),'\u2002\u2002%16\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%17\u2002=\u2002"qnt.const_fake_quant"(%16)',(0,t.jsx)("br",{}),'\u2002\u2002%18\u2002=\u2002"hbir.mul"(%15,\u2002%17)',(0,t.jsx)("br",{}),'\u2002\u2002%19\u2002=\u2002"qnt.const_fake_quant"(%18)',(0,t.jsx)("br",{}),'\u2002\u2002%20\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%21\u2002=\u2002"qnt.const_fake_quant"(%20)',(0,t.jsx)("br",{}),'\u2002\u2002%22\u2002=\u2002"hbir.add"(%19,\u2002%21)',(0,t.jsx)("br",{}),'\u2002\u2002%23\u2002=\u2002"qnt.const_fake_quant"(%22)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%23",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.add"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32, if type is int32, this hbir.add op must be fusible to a Conv op",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.sub"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reduce_mean"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"5",children:["if\u2002float\u2002and\u2002dim\u2002is\u2002not\u2002None:",(0,t.jsx)("br",{}),"\u2002\u2002func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%0\u2002=\u2002"hbir.reduce_mean"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%1\u2002=\u2002"hbir.sub"(%arg0,\u2002%0)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%2\u2002=\u2002"hbir.mul"(%1,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%3\u2002=\u2002"hbir.reduce_mean"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%4\u2002=\u2002"hbir.rsqrt"(%3)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%5\u2002=\u2002"hbir.mul"(%1,\u2002%4)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%6\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%7\u2002=\u2002"hbir.mul"(%5,\u2002%6)',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%8\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002\u2002\u2002%9\u2002=\u2002"hbir.add"(%7,\u2002%8)',(0,t.jsx)("br",{}),"\u2002\u2002\u2002\u2002return\u2002%9",(0,t.jsx)("br",{}),"\u2002\u2002}"]}),(0,t.jsx)("td",{children:"hbir.rsqrt"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.add"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32, if type is int32, this hbir.add op must be fusible to a Conv op",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.sub"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reduce_mean"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002float\u2002and\u2002dim\u2002is\u2002None:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002\u2002%0\u2002=\u2002"hbir.layernorm"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.layernorm"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"3",children:"torch.nn.Linear"}),(0,t.jsx)("td",{rowSpan:"3",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002float:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.linear"(%arg0,\u2002%0,\u2002%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.linear"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16, input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,C_in]",(0,t.jsx)("br",{}),"Dim: *, C_in \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"weight:"}),(0,t.jsx)("br",{}),"Type: int8, int16, input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [C_out, C_in]",(0,t.jsx)("br",{}),"Dim: C_in,C_out \u2208 [1, 8192]; C_in \xd7 C_out \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"bias:"}),(0,t.jsx)("br",{}),"Type: f32",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32",(0,t.jsx)("br",{}),"Other constraints: Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"qnt.const_fake_quant"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.reshape"(%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"hbir.linear"(%arg0,\u2002%2,\u2002%3)',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"qnt.const_fake_quant"(%4)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%5",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.linear"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16, input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,C_in]",(0,t.jsx)("br",{}),"Dim: *, C_in \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"weight:"}),(0,t.jsx)("br",{}),"Type: int8, int16, input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [C_out, C_in]",(0,t.jsx)("br",{}),"Dim: C_in,C_out \u2208 [1, 8192]; C_in \xd7 C_out \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"bias:"}),(0,t.jsx)("br",{}),"Type: f32",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32",(0,t.jsx)("br",{}),"Other constraints: Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["torch.nn.functional.max_pool2d",(0,t.jsx)("br",{}),"torch.nn.MaxPool2d",(0,t.jsx)("br",{}),"torch.nn.functional.adaptive_max_pool2d",(0,t.jsx)("br",{}),"torch.nn.AdaptiveMaxPool2d"]}),(0,t.jsx)("td",{rowSpan:"2",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.max_pool2d"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.transpose"(%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.max_pool2d"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"13",children:"torch.nn.MultiheadAttention"}),(0,t.jsx)("td",{rowSpan:"13"}),(0,t.jsxs)("td",{rowSpan:"13",children:["func.func\u2002@forward(%arg0,\u2002%arg1,\u2002%arg2,\u2002%arg3,\u2002%arg4){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.transpose"(%arg1)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.transpose"(%arg2)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"hbir.linear"(%0,\u2002%3,\u2002%4)',(0,t.jsx)("br",{}),'\u2002\u2002%6\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%7\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%8\u2002=\u2002"hbir.linear"(%1,\u2002%6,\u2002%7)',(0,t.jsx)("br",{}),'\u2002\u2002%9\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%10\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%11\u2002=\u2002"hbir.linear"(%2,\u2002%9,\u2002%10)',(0,t.jsx)("br",{}),'\u2002\u2002%12\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%13\u2002=\u2002"hbir.concat"(%8,\u2002%12)',(0,t.jsx)("br",{}),'\u2002\u2002%14\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%15\u2002=\u2002"hbir.concat"(%11,\u2002%14)',(0,t.jsx)("br",{}),'\u2002\u2002%16\u2002=\u2002"hbir.pad"(%arg4)',(0,t.jsx)("br",{}),'\u2002\u2002%17\u2002=\u2002"hbir.pad"(%arg3)',(0,t.jsx)("br",{}),'\u2002\u2002%18\u2002=\u2002"hbir.reshape"(%5)',(0,t.jsx)("br",{}),'\u2002\u2002%19\u2002=\u2002"hbir.transpose"(%18)',(0,t.jsx)("br",{}),'\u2002\u2002%20\u2002=\u2002"hbir.reshape"(%13)',(0,t.jsx)("br",{}),'\u2002\u2002%21\u2002=\u2002"hbir.transpose"(%20)',(0,t.jsx)("br",{}),'\u2002\u2002%22\u2002=\u2002"hbir.reshape"(%15)',(0,t.jsx)("br",{}),'\u2002\u2002%23\u2002=\u2002"hbir.transpose"(%22)',(0,t.jsx)("br",{}),'\u2002\u2002%24\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%25\u2002=\u2002"hbir.concat"(%21,\u2002%24)',(0,t.jsx)("br",{}),'\u2002\u2002%26\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%27\u2002=\u2002"hbir.concat"(%23,\u2002%26)',(0,t.jsx)("br",{}),'\u2002\u2002%28\u2002=\u2002"hbir.pad"(%16)',(0,t.jsx)("br",{}),'\u2002\u2002%29\u2002=\u2002"hbir.pad"(%17)',(0,t.jsx)("br",{}),'\u2002\u2002%30\u2002=\u2002"hbir.reshape"(%28)',(0,t.jsx)("br",{}),'\u2002\u2002%31\u2002=\u2002"hbir.reshape"(%29)',(0,t.jsx)("br",{}),'\u2002\u2002%32\u2002=\u2002"hbir.logical_or"(%30,\u2002%31)',(0,t.jsx)("br",{}),'\u2002\u2002%33\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%34\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%35\u2002=\u2002"hbir.where"(%32,\u2002%34,\u2002%33)',(0,t.jsx)("br",{}),'\u2002\u2002%36\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%37\u2002=\u2002"hbir.mul"(%19,\u2002%36)',(0,t.jsx)("br",{}),'\u2002\u2002%38\u2002=\u2002"hbir.transpose"(%25)',(0,t.jsx)("br",{}),'\u2002\u2002%39\u2002=\u2002"hbir.matmul"(%37,\u2002%38)',(0,t.jsx)("br",{}),'\u2002\u2002%40\u2002=\u2002"hbir.tile"(%35)',(0,t.jsx)("br",{}),'\u2002\u2002%41\u2002=\u2002"hbir.reshape"(%40)',(0,t.jsx)("br",{}),'\u2002\u2002%42\u2002=\u2002"hbir.add"(%39,\u2002%41)',(0,t.jsx)("br",{}),'\u2002\u2002%43\u2002=\u2002"hbir.softmax"(%42)',(0,t.jsx)("br",{}),'\u2002\u2002%44\u2002=\u2002"hbir.matmul"(%43,\u2002%27)',(0,t.jsx)("br",{}),'\u2002\u2002%45\u2002=\u2002"hbir.transpose"(%44)',(0,t.jsx)("br",{}),'\u2002\u2002%46\u2002=\u2002"hbir.reshape"(%45)',(0,t.jsx)("br",{}),'\u2002\u2002%47\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%48\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%49\u2002=\u2002"hbir.linear"(%46,\u2002%47,\u2002%48)',(0,t.jsx)("br",{}),'\u2002\u2002%50\u2002=\u2002"hbir.reshape"(%43)',(0,t.jsx)("br",{}),'\u2002\u2002%51\u2002=\u2002"hbir.reduce_mean"(%50)',(0,t.jsx)("br",{}),'\u2002\u2002%52\u2002=\u2002"hbir.transpose"(%49)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%52,\u2002%51",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.matmul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16; lhs and rhs cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,M,C]",(0,t.jsx)("br",{}),"Dim: * \u2208 [1, 4096], M,C \u2208 [1, 8192]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16; lhs and rhs cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,C,N]",(0,t.jsx)("br",{}),"Dim: * \u2208 [1, 4096]; C,N \u2208 [1, 8192]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32",(0,t.jsx)("br",{}),"Shape: [*,M,N]",(0,t.jsx)("br",{}),"Other constraints: Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.softmax"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.add"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32, if type is int32, this hbir.add op must be fusible to a Conv op",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.tile"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.where"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"condition:"}),(0,t.jsx)("br",{}),"Type: bool8",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reduce_mean"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),"Dim: reduce axis dim size \u2208 [1, 65535]",(0,t.jsx)("br",{}),"Element : reduce Elements size \u2208 [1, 65535]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input, ReduceArgMax/ReduceArgMin's output can be of type int32 or int64, as long as the size of the reduced axis can be represented using an int16 number",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.linear"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8, int16, input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [*,C_in]",(0,t.jsx)("br",{}),"Dim: *, C_in \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"weight:"}),(0,t.jsx)("br",{}),"Type: int8, int16, input and weight cannot both be int16",(0,t.jsx)("br",{}),"Shape: [C_out, C_in]",(0,t.jsx)("br",{}),"Dim: C_in,C_out \u2208 [1, 8192]; C_in \xd7 C_out \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"bias:"}),(0,t.jsx)("br",{}),"Type: f32",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32",(0,t.jsx)("br",{}),"Other constraints: Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.concat"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Arg Number: input number \u2208 [1, 1024]",(0,t.jsx)("br",{}),"Dim: all dims < 131072 ",(0,t.jsx)("br",{}),"size < 2G",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.pad"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int64, uint64 and f64 are not supported when expansionMode is 'constant' else no constraints",(0,t.jsx)("br",{}),"Dim: all dims < 737280 when expansionMode is not 'constant' else no constraints",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"begin/end:"}),(0,t.jsx)("br",{}),"Value should be in range [1, 4096]",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.logical_or"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16, bool8",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: bool8",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.mul"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"lhs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),"Shape: [*]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"rhs:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as lhs",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.nn.functional.selu",(0,t.jsx)("br",{}),"torch.nn.SELU"]}),(0,t.jsx)("td",{rowSpan:"1",children:"torch.nn.SELU"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.nn.functional.sigmoid",(0,t.jsx)("br",{}),"torch.nn.Sigmoid"]}),(0,t.jsx)("td",{rowSpan:"1",children:"torch.nn.Sigmoid"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"torch.nn.Softplus"}),(0,t.jsx)("td",{rowSpan:"1"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["torch.tanh",(0,t.jsx)("br",{}),"torch.nn.Tanh"]}),(0,t.jsx)("td",{rowSpan:"1",children:"torch.nn.Tanh"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%4",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"2",children:"torch.quantization.DeQuantStub"}),(0,t.jsx)("td",{rowSpan:"2",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002float:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),"\u2002return\u2002%arg0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{}),(0,t.jsx)("td",{children:(0,t.jsx)("br",{})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.barrier"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"qnt.barrier"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"2",children:"torch.quantization.QuantStub"}),(0,t.jsx)("td",{rowSpan:"2",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002float:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),"\u2002return\u2002%arg0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{}),(0,t.jsx)("td",{children:(0,t.jsx)("br",{})})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"1",children:["if\u2002qat:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"qnt.const_fake_quant"(%arg0)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"qnt.const_fake_quant"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.AnchorGenerator"}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),"\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.constant"}),(0,t.jsxs)("td",{children:["No limits",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.BaseGridGenerator"}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),"\u2002return\u2002%0",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.constant"}),(0,t.jsxs)("td",{children:["No limits",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"2",children:"horizon.nn.functional.bev_pool_v2"}),(0,t.jsx)("td",{rowSpan:"2",children:"horizon.nn.BevPoolV2"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0,\u2002%arg1,\u2002%arg2,\u2002%arg3,\u2002%arg4,\u2002%arg5,\u2002%arg6){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.transpose"(%arg1)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.bev_pool_v2"(%arg0,\u2002%0,\u2002%arg2,\u2002%arg3,\u2002%arg4,\u2002%arg5,\u2002%arg6)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.transpose"(%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.bev_pool_v2"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"2",children:"horizon.nn.GridSample"}),(0,t.jsx)("td",{rowSpan:"2"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.warp"(%0,\u2002%arg1)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.transpose"(%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.warp"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8",(0,t.jsx)("br",{}),"Shape: [*,H,W,C]",(0,t.jsx)("br",{}),"Dim: H,W \u2208 [1, 1024]; H*W \u2264 720*1024; other dims \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"grid:"}),(0,t.jsx)("br",{}),"Type: int16",(0,t.jsx)("br",{}),"Shape: [*,H,W,2]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input except Dim constraints",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"1",children:"horizon.nn.SegmentLUT"}),(0,t.jsx)("td",{rowSpan:"1",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"1",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'%0\u2002=\u2002"qnt.quantize"(%arg0)',(0,t.jsx)("br",{}),'%1\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'%2\u2002=\u2002"b30.lut"(%0,\u2002%1)',(0,t.jsx)("br",{}),'%3\u2002=\u2002"qnt.dequantize"(%2)',(0,t.jsx)("br",{}),'%4\u2002=\u2002"qnt.const_fake_quant"(%3)',(0,t.jsx)("br",{}),"return\u2002%4"]}),(0,t.jsx)("td",{children:"b30.lut"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"inputs:"}),(0,t.jsx)("br",{}),"Type: int8, int16",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"outputs:"}),(0,t.jsx)("br",{}),"If input is int8, output is int8",(0,t.jsx)("br",{}),"If input is int16, output is int8/int16",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"2",children:"horizon.nn.functional.filter"}),(0,t.jsx)("td",{rowSpan:"2",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'%0\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'%maxValue,\u2002%maxIndex,\u2002%filterCoord,\u2002%filterData\u2002=\u2002"hbir.filter"(%0)',(0,t.jsx)("br",{}),"return\u2002%maxValue,\u2002%maxIndex,\u2002%filterCoord,\u2002%filterData",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.filter"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"3",children:"torchvision.ops.DeformConv2d"}),(0,t.jsx)("td",{rowSpan:"3"}),(0,t.jsxs)("td",{rowSpan:"3",children:["func.func\u2002@forward(%arg0,\u2002%arg1,\u2002%arg2){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.transpose"(%arg0)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.transpose"(%arg1)',(0,t.jsx)("br",{}),'\u2002\u2002%3\u2002=\u2002"hbir.transpose"(%arg2)',(0,t.jsx)("br",{}),'\u2002\u2002%4\u2002=\u2002"hbir.transpose"(%0)',(0,t.jsx)("br",{}),'\u2002\u2002%5\u2002=\u2002"hbir.deform_conv2d"(%1,\u2002%4,\u2002%2,\u2002%3)',(0,t.jsx)("br",{}),'\u2002\u2002%6\u2002=\u2002"hbir.transpose"(%5)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%6",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.constant"}),(0,t.jsxs)("td",{children:["No limits",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.transpose"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.deform_conv2d"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Type: int8",(0,t.jsx)("br",{}),"Shape: [*,H,W,C]",(0,t.jsx)("br",{}),"Dim: H,W \u2208 [1, 1024]; H&timesW \u2264 720&times1024 other dims \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"offset:"}),(0,t.jsx)("br",{}),"Type: int16",(0,t.jsx)("br",{}),"Shape: [*,OH,OW,2&timesoffsetGroupNum&timesKH&timesKW]",(0,t.jsx)("br",{}),"Size: 2&timesoffsetGroupNum&timesKH&timesKW \u2208 [2, 256], OH&timesKH&timesOW&timesKW \u2264 720&time1024",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"mask:"}),(0,t.jsx)("br",{}),"Type: int8",(0,t.jsx)("br",{}),"Shape: [*,OH,OW,offsetGroupNum&timesKH&timesKW]",(0,t.jsx)("br",{}),"Size: offsetGroupNum&timesKH&timesKW \u2208 [1, 128]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"weight:"}),(0,t.jsx)("br",{}),"Type: int8",(0,t.jsx)("br",{}),"Shape: [N,KH,KW,C]",(0,t.jsx)("br",{}),"Dim: C \u2208 [1, 8192]; KH,KW \u2208 [1, 8]; N \u2208 [1, 4096]",(0,t.jsx)("br",{}),"Size: KH&timesKW&timesC \u2208 [1, 65536]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"bias:"}),(0,t.jsx)("br",{}),"Type: f32",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Type: int8, int16, int32",(0,t.jsx)("br",{}),"Other constraints: Same as fin",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"stride:"}),(0,t.jsx)("br",{}),"Shape: [SH,SW]",(0,t.jsx)("br",{}),"Dim: SH,SW \u2208 [1]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"pad:"}),(0,t.jsx)("br",{}),"Shape: [P_top,P_left,P_bottom,P_right]",(0,t.jsx)("br",{}),"Dim: P_top,P_bottom \u2208 [-H/2, 256], P_left,P_right \u2208 [-W/2, 256]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"groupNum:"}),(0,t.jsx)("br",{}),"fin.c is divisible by group number",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"offsetGroupNum:"}),(0,t.jsx)("br",{}),"fin.c is divisible by offset group number",(0,t.jsx)("br",{}),"Size: offsetGroupNum \u2208 [1, 2]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"dilation:"}),(0,t.jsx)("br",{}),"Shape: [DH,DW]",(0,t.jsx)("br",{}),"Dim: DH,DW \u2208 [1]",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"others:"}),(0,t.jsx)("br",{}),"For each group, fin.c \u2208 [1, 8192], KH&timesKW&timesfin.c \u2208 [1, 65535], fin.c = C when group = 1",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"5",children:"torch.Tensor.__getitem__"}),(0,t.jsx)("td",{rowSpan:"5",children:"\u3000"}),(0,t.jsxs)("td",{rowSpan:"3",children:["if\u2002use\u2002as\u2002slice:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'%0\u2002=\u2002"hbir.slice"(%arg0)',(0,t.jsx)("br",{}),'%1\u2002=\u2002"hbir.select"(%0)',(0,t.jsx)("br",{}),'%2\u2002=\u2002"hbir.reshape"(%1)',(0,t.jsx)("br",{}),"return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.select"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.slice"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"Dim: all dims < 2097152 ",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsxs)("td",{rowSpan:"2",children:["if\u2002use\u2002as\u2002index:",(0,t.jsx)("br",{}),"func.func\u2002@forward(%arg0){",(0,t.jsx)("br",{}),'%0\u2002=\u2002"hbir.select"(%arg0)',(0,t.jsx)("br",{}),'%1\u2002=\u2002"hbir.reshape"(%0)',(0,t.jsx)("br",{}),"return\u2002%1",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.select"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{rowSpan:"2",children:"torch.Tensor.__setitem__"}),(0,t.jsx)("td",{rowSpan:"2",children:"horizon.nn.SetItem"}),(0,t.jsxs)("td",{rowSpan:"2",children:["func.func\u2002@forward(%arg0,\u2002%arg1){",(0,t.jsx)("br",{}),'\u2002\u2002%0\u2002=\u2002"hbir.constant"()',(0,t.jsx)("br",{}),'\u2002\u2002%1\u2002=\u2002"hbir.reshape"(%arg1)',(0,t.jsx)("br",{}),'\u2002\u2002%2\u2002=\u2002"hbir.scatter_nd"(%arg0,\u2002%0,\u2002%1)',(0,t.jsx)("br",{}),"\u2002\u2002return\u2002%2",(0,t.jsx)("br",{}),"}"]}),(0,t.jsx)("td",{children:"hbir.scatter_nd"}),(0,t.jsxs)("td",{children:["Unsupported",(0,t.jsx)("br",{})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:"hbir.reshape"}),(0,t.jsxs)("td",{children:[(0,t.jsx)("b",{children:"input:"}),(0,t.jsx)("br",{}),"No limits",(0,t.jsx)("br",{}),(0,t.jsx)("b",{children:"output:"}),(0,t.jsx)("br",{}),"Same as input",(0,t.jsx)("br",{})]})]})]})]})})]})}function j(){let r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:s}=Object.assign({},(0,i.ah)(),r.components);return s?(0,t.jsx)(s,Object.assign({},r,{children:(0,t.jsx)(x,r)})):x(r)}s.default=j,j.__RSPRESS_PAGE_META={},j.__RSPRESS_PAGE_META["3.0.22%2Fzh%2Fguide%2Fappendix%2Fsupported_op_list%2Ftorch_operator_support_list.mdx"]={toc:[],title:"Torch\u7B97\u5B50BPU\u7EA6\u675F\u5217\u8868",frontmatter:{outline:!1}}},95895:function(r,s,n){n(39710);var t=n(85893),i=n(67294),e=n(45687);n(20388);let x={"zh-CN":r=>`\u{9884}\u{8BA1}\u{9605}\u{8BFB}\u{65F6}\u{95F4}: ${r.minutes>=1?`${Math.ceil(r.minutes)} \u{5206}\u{949F}`:"\u5C0F\u4E8E 1 \u5206\u949F"}`,"en-US":r=>`Estimated reading time: ${r.minutes>=1?`${Math.ceil(r.minutes)} minutes`:"less than 1 minute"}`};function j(r,s,n){let t=Object.keys(x).includes(s)?s:n;return x[t](r)}s.Z=r=>{let{defaultLocale:s="en-US"}=r,n=(0,e.Vi)().page.readingTimeData,x=(0,e.Jr)(),b=(0,e.e7)(),[d,h]=(0,i.useState)(j(n,x,s));return(0,i.useEffect)(()=>{h(j(n,x,s))},[x,n]),(0,t.jsx)("span",{"data-dark":String(b),className:"rp-reading-time",children:d})}}}]);