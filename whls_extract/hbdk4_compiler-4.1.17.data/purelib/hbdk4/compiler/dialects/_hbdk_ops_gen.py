
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_result_or_value as _get_op_result_or_value,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "hbdk"

@_ods_cext.register_operation(_Dialect)
class AssemblyOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.assembly"

  _ODS_REGIONS = (1, True)

  def __init__(self, outputs, inputs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(outputs)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def outputs(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def body(self):
    return self.regions[0]

def assembly(outputs, inputs, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(AssemblyOp(outputs=outputs, inputs=inputs, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class BarrierOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.barrier"

  _ODS_REGIONS = (0, True)

  def __init__(self, inputs, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

def barrier(inputs, *, extra=None, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(BarrierOp(inputs=inputs, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class BinaryAssemblyOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.binary_assembly"

  _ODS_REGIONS = (0, True)

  def __init__(self, outputs, inputs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(outputs)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def outputs(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

def binary_assembly(outputs, inputs, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(BinaryAssemblyOp(outputs=outputs, inputs=inputs, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class BroadcastOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.broadcast"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, dims, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["dims"] = (dims if (
    isinstance(dims, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(dims, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def dims(self):
    return self.operation.attributes["dims"]

  @dims.setter
  def dims(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["dims"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

def broadcast(output, input, dims, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(BroadcastOp(output=output, input=input, dims=dims, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ChangeBlockSizeOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.change_block_size"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, srcBlockSize, dstBlockSize, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["srcBlockSize"] = (srcBlockSize if (
    isinstance(srcBlockSize, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(srcBlockSize, context=_ods_context))
    attributes["dstBlockSize"] = (dstBlockSize if (
    isinstance(dstBlockSize, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(dstBlockSize, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def srcBlockSize(self):
    return self.operation.attributes["srcBlockSize"]

  @srcBlockSize.setter
  def srcBlockSize(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["srcBlockSize"] = value

  @builtins.property
  def dstBlockSize(self):
    return self.operation.attributes["dstBlockSize"]

  @dstBlockSize.setter
  def dstBlockSize(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["dstBlockSize"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

def change_block_size(output, input, src_block_size, dst_block_size, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ChangeBlockSizeOp(output=output, input=input, srcBlockSize=src_block_size, dstBlockSize=dst_block_size, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class CheckOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.check"

  _ODS_REGIONS = (1, True)

  def __init__(self, output, inputs, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def output(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

  @builtins.property
  def body(self):
    return self.regions[0]

def check(output, inputs, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(CheckOp(output=output, inputs=inputs, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ComposeOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.compose"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, inputs, axis, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["axis"] = (axis if (
    isinstance(axis, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(axis, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def axis(self):
    return self.operation.attributes["axis"]

  @axis.setter
  def axis(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["axis"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

def compose(output, inputs, axis, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ComposeOp(output=output, inputs=inputs, axis=axis, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ConstRefOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.const_ref"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, file, sha256, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["file"] = (file if (
    isinstance(file, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(file, context=_ods_context))
    attributes["sha256"] = (sha256 if (
    isinstance(sha256, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(sha256, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def file(self):
    return self.operation.attributes["file"]

  @file.setter
  def file(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["file"] = value

  @builtins.property
  def sha256(self):
    return self.operation.attributes["sha256"]

  @sha256.setter
  def sha256(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sha256"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

def const_ref(output, file, sha256, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ConstRefOp(output=output, file=file, sha256=sha256, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ConstantGeneratorOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.constant_generator"

  _ODS_REGIONS = (1, True)

  def __init__(self, output, offsets, sizes, steps, value, *, mode=None, instanceId=None, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["offsets"] = (offsets if (
    isinstance(offsets, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(offsets, context=_ods_context))
    attributes["sizes"] = (sizes if (
    isinstance(sizes, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(sizes, context=_ods_context))
    attributes["steps"] = (steps if (
    isinstance(steps, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(steps, context=_ods_context))
    attributes["value"] = (value if (
    isinstance(value, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(value, context=_ods_context))
    if mode is not None: attributes["mode"] = (mode if (
        isinstance(mode, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('FRModeAttr')) else
          _ods_ir.AttrBuilder.get('FRModeAttr')(mode, context=_ods_context))
    if instanceId is not None: attributes["instanceId"] = (instanceId if (
        isinstance(instanceId, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(instanceId, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def offsets(self):
    return self.operation.attributes["offsets"]

  @offsets.setter
  def offsets(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["offsets"] = value

  @builtins.property
  def sizes(self):
    return self.operation.attributes["sizes"]

  @sizes.setter
  def sizes(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sizes"] = value

  @builtins.property
  def steps(self):
    return self.operation.attributes["steps"]

  @steps.setter
  def steps(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["steps"] = value

  @builtins.property
  def value(self):
    return self.operation.attributes["value"]

  @value.setter
  def value(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["value"] = value

  @builtins.property
  def mode(self):
    return self.operation.attributes["mode"]

  @mode.setter
  def mode(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mode"] = value

  @builtins.property
  def instanceId(self):
    return self.operation.attributes["instanceId"]

  @instanceId.setter
  def instanceId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["instanceId"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

  @builtins.property
  def body(self):
    return self.regions[0]

def constant_generator(output, offsets, sizes, steps, value, *, mode=None, instance_id=None, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ConstantGeneratorOp(output=output, offsets=offsets, sizes=sizes, steps=steps, value=value, mode=mode, instanceId=instance_id, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ConvAddOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.conv_add"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, weight, sumin, *, bias=None, stride=None, pad=None, dilation=None, groupNum=None, channelLast=None, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    operands.append(_get_op_result_or_value(weight))
    operands.append(_get_op_result_or_value(sumin))
    if bias is not None: operands.append(_get_op_result_or_value(bias))
    _ods_context = _ods_get_default_loc_context(loc)
    if stride is not None: attributes["stride"] = (stride if (
        isinstance(stride, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
          _ods_ir.AttrBuilder.get('I64ArrayAttr')(stride, context=_ods_context))
    if pad is not None: attributes["pad"] = (pad if (
        isinstance(pad, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
          _ods_ir.AttrBuilder.get('I64ArrayAttr')(pad, context=_ods_context))
    if dilation is not None: attributes["dilation"] = (dilation if (
        isinstance(dilation, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
          _ods_ir.AttrBuilder.get('I64ArrayAttr')(dilation, context=_ods_context))
    if groupNum is not None: attributes["groupNum"] = (groupNum if (
        isinstance(groupNum, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(groupNum, context=_ods_context))
    if channelLast is not None: attributes["channelLast"] = (channelLast if (
        isinstance(channelLast, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('BoolAttr')) else
          _ods_ir.AttrBuilder.get('BoolAttr')(channelLast, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def weight(self):
    return self.operation.operands[1]

  @builtins.property
  def sumin(self):
    return self.operation.operands[2]

  @builtins.property
  def bias(self):
    return None if len(self.operation.operands) < 4 else self.operation.operands[3]

  @builtins.property
  def stride(self):
    return self.operation.attributes["stride"]

  @stride.setter
  def stride(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["stride"] = value

  @builtins.property
  def pad(self):
    return self.operation.attributes["pad"]

  @pad.setter
  def pad(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["pad"] = value

  @builtins.property
  def dilation(self):
    return self.operation.attributes["dilation"]

  @dilation.setter
  def dilation(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["dilation"] = value

  @builtins.property
  def groupNum(self):
    return self.operation.attributes["groupNum"]

  @groupNum.setter
  def groupNum(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["groupNum"] = value

  @builtins.property
  def channelLast(self):
    return self.operation.attributes["channelLast"]

  @channelLast.setter
  def channelLast(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["channelLast"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

def conv_add(output, input, weight, sumin, *, bias=None, stride=None, pad=None, dilation=None, group_num=None, channel_last=None, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ConvAddOp(output=output, input=input, weight=weight, sumin=sumin, bias=bias, stride=stride, pad=pad, dilation=dilation, groupNum=group_num, channelLast=channel_last, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class CopyOutputOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.copy_output"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, outputId, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["outputId"] = (outputId if (
    isinstance(outputId, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(outputId, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def outputId(self):
    return self.operation.attributes["outputId"]

  @outputId.setter
  def outputId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["outputId"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

def copy_output(output, input, output_id, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(CopyOutputOp(output=output, input=input, outputId=output_id, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class CorrelationOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.correlation"

  _ODS_REGIONS = (1, True)

  def __init__(self, output, lhs, rhs, *, kernel=None, max_d=None, stride1=None, stride2=None, pad=None, mode=None, rshift=None, startw=None, processDone=None, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(lhs))
    operands.append(_get_op_result_or_value(rhs))
    _ods_context = _ods_get_default_loc_context(loc)
    if kernel is not None: attributes["kernel"] = (kernel if (
        isinstance(kernel, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(kernel, context=_ods_context))
    if max_d is not None: attributes["max_d"] = (max_d if (
        isinstance(max_d, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(max_d, context=_ods_context))
    if stride1 is not None: attributes["stride1"] = (stride1 if (
        isinstance(stride1, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(stride1, context=_ods_context))
    if stride2 is not None: attributes["stride2"] = (stride2 if (
        isinstance(stride2, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(stride2, context=_ods_context))
    if pad is not None: attributes["pad"] = (pad if (
        isinstance(pad, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(pad, context=_ods_context))
    if mode is not None: attributes["mode"] = (mode if (
        isinstance(mode, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('CorrelationModeAttr')) else
          _ods_ir.AttrBuilder.get('CorrelationModeAttr')(mode, context=_ods_context))
    if rshift is not None: attributes["rshift"] = (rshift if (
        isinstance(rshift, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(rshift, context=_ods_context))
    if startw is not None: attributes["startw"] = (startw if (
        isinstance(startw, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(startw, context=_ods_context))
    if processDone is not None: attributes["processDone"] = (processDone if (
        isinstance(processDone, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('CorrProcess')) else
          _ods_ir.AttrBuilder.get('CorrProcess')(processDone, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def lhs(self):
    return self.operation.operands[0]

  @builtins.property
  def rhs(self):
    return self.operation.operands[1]

  @builtins.property
  def kernel(self):
    return self.operation.attributes["kernel"]

  @kernel.setter
  def kernel(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["kernel"] = value

  @builtins.property
  def max_d(self):
    return self.operation.attributes["max_d"]

  @max_d.setter
  def max_d(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["max_d"] = value

  @builtins.property
  def stride1(self):
    return self.operation.attributes["stride1"]

  @stride1.setter
  def stride1(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["stride1"] = value

  @builtins.property
  def stride2(self):
    return self.operation.attributes["stride2"]

  @stride2.setter
  def stride2(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["stride2"] = value

  @builtins.property
  def pad(self):
    return self.operation.attributes["pad"]

  @pad.setter
  def pad(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["pad"] = value

  @builtins.property
  def mode(self):
    return self.operation.attributes["mode"]

  @mode.setter
  def mode(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mode"] = value

  @builtins.property
  def rshift(self):
    return self.operation.attributes["rshift"]

  @rshift.setter
  def rshift(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["rshift"] = value

  @builtins.property
  def startw(self):
    return self.operation.attributes["startw"]

  @startw.setter
  def startw(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["startw"] = value

  @builtins.property
  def processDone(self):
    return self.operation.attributes["processDone"]

  @processDone.setter
  def processDone(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["processDone"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

  @builtins.property
  def body(self):
    return self.regions[0]

def correlation(output, lhs, rhs, *, kernel=None, max_d=None, stride1=None, stride2=None, pad=None, mode=None, rshift=None, startw=None, process_done=None, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(CorrelationOp(output=output, lhs=lhs, rhs=rhs, kernel=kernel, max_d=max_d, stride1=stride1, stride2=stride2, pad=pad, mode=mode, rshift=rshift, startw=startw, processDone=process_done, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class DdrBufferOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.alloc_ddr_buffer"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def output(self):
    return self.operation.results[0]

def alloc_ddr_buffer(output, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(DdrBufferOp(output=output, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class DeallocOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.dealloc"

  _ODS_REGIONS = (0, True)

  def __init__(self, tensor, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(tensor))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def tensor(self):
    return self.operation.operands[0]

def dealloc(tensor, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(DeallocOp(tensor=tensor, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class FetchLutOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.fetch_lut"

  _ODS_REGIONS = (1, True)

  def __init__(self, output, input, mode, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["mode"] = (mode if (
    isinstance(mode, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FetchLutModeAttr')) else
      _ods_ir.AttrBuilder.get('FetchLutModeAttr')(mode, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def mode(self):
    return self.operation.attributes["mode"]

  @mode.setter
  def mode(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mode"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

  @builtins.property
  def body(self):
    return self.regions[0]

def fetch_lut(output, input, mode, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(FetchLutOp(output=output, input=input, mode=mode, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class FetchRoiOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.fetch_roi"

  _ODS_REGIONS = (1, True)

  def __init__(self, output, input, srcOffsets, srcSteps, dstOffsets, dstSteps, sizes, *, mode=None, instanceId=None, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["srcOffsets"] = (srcOffsets if (
    isinstance(srcOffsets, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(srcOffsets, context=_ods_context))
    attributes["srcSteps"] = (srcSteps if (
    isinstance(srcSteps, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(srcSteps, context=_ods_context))
    attributes["dstOffsets"] = (dstOffsets if (
    isinstance(dstOffsets, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(dstOffsets, context=_ods_context))
    attributes["dstSteps"] = (dstSteps if (
    isinstance(dstSteps, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(dstSteps, context=_ods_context))
    attributes["sizes"] = (sizes if (
    isinstance(sizes, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(sizes, context=_ods_context))
    if mode is not None: attributes["mode"] = (mode if (
        isinstance(mode, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('FRModeAttr')) else
          _ods_ir.AttrBuilder.get('FRModeAttr')(mode, context=_ods_context))
    if instanceId is not None: attributes["instanceId"] = (instanceId if (
        isinstance(instanceId, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(instanceId, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def srcOffsets(self):
    return self.operation.attributes["srcOffsets"]

  @srcOffsets.setter
  def srcOffsets(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["srcOffsets"] = value

  @builtins.property
  def srcSteps(self):
    return self.operation.attributes["srcSteps"]

  @srcSteps.setter
  def srcSteps(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["srcSteps"] = value

  @builtins.property
  def dstOffsets(self):
    return self.operation.attributes["dstOffsets"]

  @dstOffsets.setter
  def dstOffsets(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["dstOffsets"] = value

  @builtins.property
  def dstSteps(self):
    return self.operation.attributes["dstSteps"]

  @dstSteps.setter
  def dstSteps(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["dstSteps"] = value

  @builtins.property
  def sizes(self):
    return self.operation.attributes["sizes"]

  @sizes.setter
  def sizes(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sizes"] = value

  @builtins.property
  def mode(self):
    return self.operation.attributes["mode"]

  @mode.setter
  def mode(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mode"] = value

  @builtins.property
  def instanceId(self):
    return self.operation.attributes["instanceId"]

  @instanceId.setter
  def instanceId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["instanceId"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

  @builtins.property
  def body(self):
    return self.regions[0]

def fetch_roi(output, input, src_offsets, src_steps, dst_offsets, dst_steps, sizes, *, mode=None, instance_id=None, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(FetchRoiOp(output=output, input=input, srcOffsets=src_offsets, srcSteps=src_steps, dstOffsets=dst_offsets, dstSteps=dst_steps, sizes=sizes, mode=mode, instanceId=instance_id, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class FilterPostProcessOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.filter_post_process"

  _ODS_REGIONS = (0, True)

  def __init__(self, maxValue, maxIndex, filterCoord, filterData, count, data, channelNum, selectChannelBegin, selectChannelEnd, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(count))
    operands.append(_get_op_result_or_value(data))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["channelNum"] = (channelNum if (
    isinstance(channelNum, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(channelNum, context=_ods_context))
    attributes["selectChannelBegin"] = (selectChannelBegin if (
    isinstance(selectChannelBegin, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(selectChannelBegin, context=_ods_context))
    attributes["selectChannelEnd"] = (selectChannelEnd if (
    isinstance(selectChannelEnd, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(selectChannelEnd, context=_ods_context))
    results.append(maxValue)
    results.append(maxIndex)
    results.append(filterCoord)
    results.append(filterData)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def count(self):
    return self.operation.operands[0]

  @builtins.property
  def data(self):
    return self.operation.operands[1]

  @builtins.property
  def channelNum(self):
    return self.operation.attributes["channelNum"]

  @channelNum.setter
  def channelNum(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["channelNum"] = value

  @builtins.property
  def selectChannelBegin(self):
    return self.operation.attributes["selectChannelBegin"]

  @selectChannelBegin.setter
  def selectChannelBegin(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["selectChannelBegin"] = value

  @builtins.property
  def selectChannelEnd(self):
    return self.operation.attributes["selectChannelEnd"]

  @selectChannelEnd.setter
  def selectChannelEnd(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["selectChannelEnd"] = value

  @builtins.property
  def maxValue(self):
    return self.operation.results[0]

  @builtins.property
  def maxIndex(self):
    return self.operation.results[1]

  @builtins.property
  def filterCoord(self):
    return self.operation.results[2]

  @builtins.property
  def filterData(self):
    return self.operation.results[3]

def filter_post_process(max_value, max_index, filter_coord, filter_data, count, data, channel_num, select_channel_begin, select_channel_end, *, extra=None, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return _get_op_result_or_op_results(FilterPostProcessOp(maxValue=max_value, maxIndex=max_index, filterCoord=filter_coord, filterData=filter_data, count=count, data=data, channelNum=channel_num, selectChannelBegin=select_channel_begin, selectChannelEnd=select_channel_end, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class GetGprOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.get_gpr"

  _ODS_REGIONS = (0, True)

  def __init__(self, vgpr, gpr, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["vgpr"] = (vgpr if (
    isinstance(vgpr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(vgpr, context=_ods_context))
    attributes["gpr"] = (gpr if (
    isinstance(gpr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(gpr, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vgpr(self):
    return self.operation.attributes["vgpr"]

  @vgpr.setter
  def vgpr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["vgpr"] = value

  @builtins.property
  def gpr(self):
    return self.operation.attributes["gpr"]

  @gpr.setter
  def gpr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["gpr"] = value

def get_gpr(vgpr, gpr, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(GetGprOp(vgpr=vgpr, gpr=gpr, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ImplicitPadOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.implicit_pad"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, begin, end, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["begin"] = (begin if (
    isinstance(begin, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(begin, context=_ods_context))
    attributes["end"] = (end if (
    isinstance(end, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(end, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def begin(self):
    return self.operation.attributes["begin"]

  @begin.setter
  def begin(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["begin"] = value

  @builtins.property
  def end(self):
    return self.operation.attributes["end"]

  @end.setter
  def end(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["end"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

def implicit_pad(output, input, begin, end, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ImplicitPadOp(output=output, input=input, begin=begin, end=end, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class InferTilingInfoOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.infer_tiling_info"

  _ODS_REGIONS = (0, True)

  def __init__(self, source, target, axis, alignment, blockSize, isUniform, *, intervals=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(source))
    operands.append(_get_op_result_or_value(target))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["axis"] = (axis if (
    isinstance(axis, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(axis, context=_ods_context))
    attributes["alignment"] = (alignment if (
    isinstance(alignment, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(alignment, context=_ods_context))
    attributes["blockSize"] = (blockSize if (
    isinstance(blockSize, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(blockSize, context=_ods_context))
    attributes["isUniform"] = (isUniform if (
    isinstance(isUniform, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('BoolAttr')) else
      _ods_ir.AttrBuilder.get('BoolAttr')(isUniform, context=_ods_context))
    if intervals is not None: attributes["intervals"] = (intervals if (
        isinstance(intervals, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
          _ods_ir.AttrBuilder.get('ArrayAttr')(intervals, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def source(self):
    return self.operation.operands[0]

  @builtins.property
  def target(self):
    return self.operation.operands[1]

  @builtins.property
  def axis(self):
    return self.operation.attributes["axis"]

  @axis.setter
  def axis(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["axis"] = value

  @builtins.property
  def alignment(self):
    return self.operation.attributes["alignment"]

  @alignment.setter
  def alignment(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["alignment"] = value

  @builtins.property
  def blockSize(self):
    return self.operation.attributes["blockSize"]

  @blockSize.setter
  def blockSize(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["blockSize"] = value

  @builtins.property
  def isUniform(self):
    return self.operation.attributes["isUniform"]

  @isUniform.setter
  def isUniform(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["isUniform"] = value

  @builtins.property
  def intervals(self):
    return self.operation.attributes["intervals"]

  @intervals.setter
  def intervals(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["intervals"] = value

def infer_tiling_info(source, target, axis, alignment, block_size, is_uniform, *, intervals=None, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(InferTilingInfoOp(source=source, target=target, axis=axis, alignment=alignment, blockSize=block_size, isUniform=is_uniform, intervals=intervals, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class InitResourcesOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.init_resources"

  _ODS_REGIONS = (1, True)

  def __init__(self, resources, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["resources"] = (resources if (
    isinstance(resources, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrArrayAttr')) else
      _ods_ir.AttrBuilder.get('StrArrayAttr')(resources, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def resources(self):
    return self.operation.attributes["resources"]

  @resources.setter
  def resources(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["resources"] = value

  @builtins.property
  def region(self):
    return self.regions[0]

def init_resources(resources, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(InitResourcesOp(resources=resources, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class InterleaveOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.interleave"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, inputs, axis, *, mode=None, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["axis"] = (axis if (
    isinstance(axis, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(axis, context=_ods_context))
    if mode is not None: attributes["mode"] = (mode if (
        isinstance(mode, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('InterleaveModeAttr')) else
          _ods_ir.AttrBuilder.get('InterleaveModeAttr')(mode, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def axis(self):
    return self.operation.attributes["axis"]

  @axis.setter
  def axis(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["axis"] = value

  @builtins.property
  def mode(self):
    return self.operation.attributes["mode"]

  @mode.setter
  def mode(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mode"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

def interleave(output, inputs, axis, *, mode=None, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(InterleaveOp(output=output, inputs=inputs, axis=axis, mode=mode, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class InterruptOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.set_interrupt"

  _ODS_REGIONS = (1, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def body(self):
    return self.regions[0]

def set_interrupt(*, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(InterruptOp(loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class LayerGroupEndOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.layer_group_end"

  _ODS_REGIONS = (0, True)

  def __init__(self, layerGroupId, beginLayerId, endLayerId, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["layerGroupId"] = (layerGroupId if (
    isinstance(layerGroupId, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(layerGroupId, context=_ods_context))
    attributes["beginLayerId"] = (beginLayerId if (
    isinstance(beginLayerId, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(beginLayerId, context=_ods_context))
    attributes["endLayerId"] = (endLayerId if (
    isinstance(endLayerId, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(endLayerId, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def layerGroupId(self):
    return self.operation.attributes["layerGroupId"]

  @layerGroupId.setter
  def layerGroupId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["layerGroupId"] = value

  @builtins.property
  def beginLayerId(self):
    return self.operation.attributes["beginLayerId"]

  @beginLayerId.setter
  def beginLayerId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["beginLayerId"] = value

  @builtins.property
  def endLayerId(self):
    return self.operation.attributes["endLayerId"]

  @endLayerId.setter
  def endLayerId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["endLayerId"] = value

def layer_group_end(layer_group_id, begin_layer_id, end_layer_id, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(LayerGroupEndOp(layerGroupId=layer_group_id, beginLayerId=begin_layer_id, endLayerId=end_layer_id, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class LayerGroupHeadOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.layer_group_head"

  _ODS_REGIONS = (0, True)

  def __init__(self, outputs, inputs, layerGroupId, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["layerGroupId"] = (layerGroupId if (
    isinstance(layerGroupId, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(layerGroupId, context=_ods_context))
    results.extend(outputs)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def layerGroupId(self):
    return self.operation.attributes["layerGroupId"]

  @layerGroupId.setter
  def layerGroupId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["layerGroupId"] = value

  @builtins.property
  def outputs(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

def layer_group_head(outputs, inputs, layer_group_id, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(LayerGroupHeadOp(outputs=outputs, inputs=inputs, layerGroupId=layer_group_id, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class LayerGroupTailOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.layer_group_tail"

  _ODS_REGIONS = (0, True)

  def __init__(self, outputs, inputs, layerGroupId, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["layerGroupId"] = (layerGroupId if (
    isinstance(layerGroupId, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(layerGroupId, context=_ods_context))
    results.extend(outputs)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def layerGroupId(self):
    return self.operation.attributes["layerGroupId"]

  @layerGroupId.setter
  def layerGroupId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["layerGroupId"] = value

  @builtins.property
  def outputs(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

def layer_group_tail(outputs, inputs, layer_group_id, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(LayerGroupTailOp(outputs=outputs, inputs=inputs, layerGroupId=layer_group_id, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class LoadOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.load"

  _ODS_REGIONS = (1, True)

  def __init__(self, output, input, *, offsets=None, sizes=None, strides=None, instanceId=None, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    if offsets is not None: attributes["offsets"] = (offsets if (
        isinstance(offsets, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
          _ods_ir.AttrBuilder.get('I64ArrayAttr')(offsets, context=_ods_context))
    if sizes is not None: attributes["sizes"] = (sizes if (
        isinstance(sizes, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
          _ods_ir.AttrBuilder.get('I64ArrayAttr')(sizes, context=_ods_context))
    if strides is not None: attributes["strides"] = (strides if (
        isinstance(strides, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
          _ods_ir.AttrBuilder.get('I64ArrayAttr')(strides, context=_ods_context))
    if instanceId is not None: attributes["instanceId"] = (instanceId if (
        isinstance(instanceId, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(instanceId, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def offsets(self):
    if "offsets" not in self.operation.attributes:
      return None
    return self.operation.attributes["offsets"]

  @offsets.setter
  def offsets(self, value):
    if value is not None:
      self.operation.attributes["offsets"] = value
    elif "offsets" in self.operation.attributes:
      del self.operation.attributes["offsets"]

  @offsets.deleter
  def offsets(self):
    del self.operation.attributes["offsets"]

  @builtins.property
  def sizes(self):
    if "sizes" not in self.operation.attributes:
      return None
    return self.operation.attributes["sizes"]

  @sizes.setter
  def sizes(self, value):
    if value is not None:
      self.operation.attributes["sizes"] = value
    elif "sizes" in self.operation.attributes:
      del self.operation.attributes["sizes"]

  @sizes.deleter
  def sizes(self):
    del self.operation.attributes["sizes"]

  @builtins.property
  def strides(self):
    if "strides" not in self.operation.attributes:
      return None
    return self.operation.attributes["strides"]

  @strides.setter
  def strides(self, value):
    if value is not None:
      self.operation.attributes["strides"] = value
    elif "strides" in self.operation.attributes:
      del self.operation.attributes["strides"]

  @strides.deleter
  def strides(self):
    del self.operation.attributes["strides"]

  @builtins.property
  def instanceId(self):
    return self.operation.attributes["instanceId"]

  @instanceId.setter
  def instanceId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["instanceId"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

  @builtins.property
  def body(self):
    return self.regions[0]

def load(output, input, *, offsets=None, sizes=None, strides=None, instance_id=None, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(LoadOp(output=output, input=input, offsets=offsets, sizes=sizes, strides=strides, instanceId=instance_id, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class NativeLoadOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.native_load"

  _ODS_REGIONS = (1, True)

  def __init__(self, output, input, *, instanceId=None, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    if instanceId is not None: attributes["instanceId"] = (instanceId if (
        isinstance(instanceId, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(instanceId, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def instanceId(self):
    return self.operation.attributes["instanceId"]

  @instanceId.setter
  def instanceId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["instanceId"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

  @builtins.property
  def body(self):
    return self.regions[0]

def native_load(output, input, *, instance_id=None, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(NativeLoadOp(output=output, input=input, instanceId=instance_id, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class NativeStoreOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.native_store"

  _ODS_REGIONS = (1, True)

  def __init__(self, output, input, *, instanceId=None, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    if instanceId is not None: attributes["instanceId"] = (instanceId if (
        isinstance(instanceId, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(instanceId, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def instanceId(self):
    return self.operation.attributes["instanceId"]

  @instanceId.setter
  def instanceId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["instanceId"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

  @builtins.property
  def body(self):
    return self.regions[0]

def native_store(output, input, *, instance_id=None, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(NativeStoreOp(output=output, input=input, instanceId=instance_id, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class PrintTilingConfigOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.print_tiling_config"

  _ODS_REGIONS = (1, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def body(self):
    return self.regions[0]

def print_tiling_config(*, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(PrintTilingConfigOp(loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class PyramidInputSourceOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.pyramid_input_source"

  _ODS_REGIONS = (0, True)

  def __init__(self, y, uv, image, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(image))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(y)
    results.append(uv)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def image(self):
    return self.operation.operands[0]

  @builtins.property
  def y(self):
    return self.operation.results[0]

  @builtins.property
  def uv(self):
    return self.operation.results[1]

def pyramid_input_source(y, uv, image, *, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return _get_op_result_or_op_results(PyramidInputSourceOp(y=y, uv=uv, image=image, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class PyramidOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.pyramid"

  _ODS_REGIONS = (1, True)

  def __init__(self, output, inputs, *, strides=None, mode=None, instanceId=None, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    if strides is not None: attributes["strides"] = (strides if (
        isinstance(strides, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
          _ods_ir.AttrBuilder.get('I64ArrayAttr')(strides, context=_ods_context))
    if mode is not None: attributes["mode"] = (mode if (
        isinstance(mode, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('ImageConvertModeAttr')) else
          _ods_ir.AttrBuilder.get('ImageConvertModeAttr')(mode, context=_ods_context))
    if instanceId is not None: attributes["instanceId"] = (instanceId if (
        isinstance(instanceId, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(instanceId, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def strides(self):
    if "strides" not in self.operation.attributes:
      return None
    return self.operation.attributes["strides"]

  @strides.setter
  def strides(self, value):
    if value is not None:
      self.operation.attributes["strides"] = value
    elif "strides" in self.operation.attributes:
      del self.operation.attributes["strides"]

  @strides.deleter
  def strides(self):
    del self.operation.attributes["strides"]

  @builtins.property
  def mode(self):
    return self.operation.attributes["mode"]

  @mode.setter
  def mode(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mode"] = value

  @builtins.property
  def instanceId(self):
    return self.operation.attributes["instanceId"]

  @instanceId.setter
  def instanceId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["instanceId"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

  @builtins.property
  def body(self):
    return self.regions[0]

def pyramid(output, inputs, *, strides=None, mode=None, instance_id=None, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(PyramidOp(output=output, inputs=inputs, strides=strides, mode=mode, instanceId=instance_id, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ReceiveDataSyncOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.receive_data_sync"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, syncId, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(input))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["syncId"] = (syncId if (
    isinstance(syncId, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(syncId, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def syncId(self):
    return self.operation.attributes["syncId"]

  @syncId.setter
  def syncId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["syncId"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

def receive_data_sync(output, input, sync_id, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ReceiveDataSyncOp(output=output, input=input, syncId=sync_id, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ReinterpretOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.reinterpret"

  _ODS_REGIONS = (0, True)

  def __init__(self, outputs, inputs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(outputs)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def outputs(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

def reinterpret(outputs, inputs, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ReinterpretOp(outputs=outputs, inputs=inputs, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ReserveBufferOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.reserve_buffer"

  _ODS_REGIONS = (0, True)

  def __init__(self, buffer, idx, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["idx"] = (idx if (
    isinstance(idx, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(idx, context=_ods_context))
    results.append(buffer)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def idx(self):
    return self.operation.attributes["idx"]

  @idx.setter
  def idx(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["idx"] = value

  @builtins.property
  def buffer(self):
    return self.operation.results[0]

def reserve_buffer(buffer, idx, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ReserveBufferOp(buffer=buffer, idx=idx, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ReturnOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.return"

  _ODS_REGIONS = (0, True)

  def __init__(self, inputs, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

def return_(inputs, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(ReturnOp(inputs=inputs, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class RlePostProcessOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.rle_post_process"

  _ODS_REGIONS = (0, True)

  def __init__(self, encodeCount, encodeData, accuEncodeCount, accuEncodeData, invalidNumber, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(accuEncodeCount))
    operands.append(_get_op_result_or_value(accuEncodeData))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["invalidNumber"] = (invalidNumber if (
    isinstance(invalidNumber, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(invalidNumber, context=_ods_context))
    results.append(encodeCount)
    results.append(encodeData)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def accuEncodeCount(self):
    return self.operation.operands[0]

  @builtins.property
  def accuEncodeData(self):
    return self.operation.operands[1]

  @builtins.property
  def invalidNumber(self):
    return self.operation.attributes["invalidNumber"]

  @invalidNumber.setter
  def invalidNumber(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["invalidNumber"] = value

  @builtins.property
  def encodeCount(self):
    return self.operation.results[0]

  @builtins.property
  def encodeData(self):
    return self.operation.results[1]

def rle_post_process(encode_count, encode_data, accu_encode_count, accu_encode_data, invalid_number, *, extra=None, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return _get_op_result_or_op_results(RlePostProcessOp(encodeCount=encode_count, encodeData=encode_data, accuEncodeCount=accu_encode_count, accuEncodeData=accu_encode_data, invalidNumber=invalid_number, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SendDataSyncOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.send_data_sync"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, syncId, *, coreBaseAddr=None, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["syncId"] = (syncId if (
    isinstance(syncId, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(syncId, context=_ods_context))
    if coreBaseAddr is not None: attributes["coreBaseAddr"] = (coreBaseAddr if (
        isinstance(coreBaseAddr, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(coreBaseAddr, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def syncId(self):
    return self.operation.attributes["syncId"]

  @syncId.setter
  def syncId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["syncId"] = value

  @builtins.property
  def coreBaseAddr(self):
    if "coreBaseAddr" not in self.operation.attributes:
      return None
    return self.operation.attributes["coreBaseAddr"]

  @coreBaseAddr.setter
  def coreBaseAddr(self, value):
    if value is not None:
      self.operation.attributes["coreBaseAddr"] = value
    elif "coreBaseAddr" in self.operation.attributes:
      del self.operation.attributes["coreBaseAddr"]

  @coreBaseAddr.deleter
  def coreBaseAddr(self):
    del self.operation.attributes["coreBaseAddr"]

  @builtins.property
  def output(self):
    return self.operation.results[0]

def send_data_sync(output, input, sync_id, *, core_base_addr=None, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(SendDataSyncOp(output=output, input=input, syncId=sync_id, coreBaseAddr=core_base_addr, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SetArbitrationPriorityOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.set_arbitration_priority"

  _ODS_REGIONS = (1, True)

  def __init__(self, arqos, awqos, class2_3_weight, ctrl1, taeVaeWeight, ldStWeight, apmSpuLdStWeight, vpu01Weight, vpu01TransAaeWeight, transAaeWeight, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["arqos"] = (arqos if (
    isinstance(arqos, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(arqos, context=_ods_context))
    attributes["awqos"] = (awqos if (
    isinstance(awqos, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(awqos, context=_ods_context))
    attributes["class2_3_weight"] = (class2_3_weight if (
    isinstance(class2_3_weight, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(class2_3_weight, context=_ods_context))
    attributes["ctrl1"] = (ctrl1 if (
    isinstance(ctrl1, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(ctrl1, context=_ods_context))
    attributes["taeVaeWeight"] = (taeVaeWeight if (
    isinstance(taeVaeWeight, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(taeVaeWeight, context=_ods_context))
    attributes["ldStWeight"] = (ldStWeight if (
    isinstance(ldStWeight, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(ldStWeight, context=_ods_context))
    attributes["apmSpuLdStWeight"] = (apmSpuLdStWeight if (
    isinstance(apmSpuLdStWeight, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(apmSpuLdStWeight, context=_ods_context))
    attributes["vpu01Weight"] = (vpu01Weight if (
    isinstance(vpu01Weight, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(vpu01Weight, context=_ods_context))
    attributes["vpu01TransAaeWeight"] = (vpu01TransAaeWeight if (
    isinstance(vpu01TransAaeWeight, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(vpu01TransAaeWeight, context=_ods_context))
    attributes["transAaeWeight"] = (transAaeWeight if (
    isinstance(transAaeWeight, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(transAaeWeight, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def arqos(self):
    return self.operation.attributes["arqos"]

  @arqos.setter
  def arqos(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["arqos"] = value

  @builtins.property
  def awqos(self):
    return self.operation.attributes["awqos"]

  @awqos.setter
  def awqos(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["awqos"] = value

  @builtins.property
  def class2_3_weight(self):
    return self.operation.attributes["class2_3_weight"]

  @class2_3_weight.setter
  def class2_3_weight(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["class2_3_weight"] = value

  @builtins.property
  def ctrl1(self):
    return self.operation.attributes["ctrl1"]

  @ctrl1.setter
  def ctrl1(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["ctrl1"] = value

  @builtins.property
  def taeVaeWeight(self):
    return self.operation.attributes["taeVaeWeight"]

  @taeVaeWeight.setter
  def taeVaeWeight(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["taeVaeWeight"] = value

  @builtins.property
  def ldStWeight(self):
    return self.operation.attributes["ldStWeight"]

  @ldStWeight.setter
  def ldStWeight(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["ldStWeight"] = value

  @builtins.property
  def apmSpuLdStWeight(self):
    return self.operation.attributes["apmSpuLdStWeight"]

  @apmSpuLdStWeight.setter
  def apmSpuLdStWeight(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["apmSpuLdStWeight"] = value

  @builtins.property
  def vpu01Weight(self):
    return self.operation.attributes["vpu01Weight"]

  @vpu01Weight.setter
  def vpu01Weight(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["vpu01Weight"] = value

  @builtins.property
  def vpu01TransAaeWeight(self):
    return self.operation.attributes["vpu01TransAaeWeight"]

  @vpu01TransAaeWeight.setter
  def vpu01TransAaeWeight(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["vpu01TransAaeWeight"] = value

  @builtins.property
  def transAaeWeight(self):
    return self.operation.attributes["transAaeWeight"]

  @transAaeWeight.setter
  def transAaeWeight(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["transAaeWeight"] = value

  @builtins.property
  def body(self):
    return self.regions[0]

def set_arbitration_priority(arqos, awqos, class2_3_weight, ctrl1, tae_vae_weight, ld_st_weight, apm_spu_ld_st_weight, vpu01_weight, vpu01_trans_aae_weight, trans_aae_weight, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(SetArbitrationPriorityOp(arqos=arqos, awqos=awqos, class2_3_weight=class2_3_weight, ctrl1=ctrl1, taeVaeWeight=tae_vae_weight, ldStWeight=ld_st_weight, apmSpuLdStWeight=apm_spu_ld_st_weight, vpu01Weight=vpu01_weight, vpu01TransAaeWeight=vpu01_trans_aae_weight, transAaeWeight=trans_aae_weight, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SetDimOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.set_dim"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, inputs, dims, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["dims"] = (dims if (
    isinstance(dims, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(dims, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def dims(self):
    return self.operation.attributes["dims"]

  @dims.setter
  def dims(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["dims"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

def set_dim(output, inputs, dims, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(SetDimOp(output=output, inputs=inputs, dims=dims, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SetGprOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.set_gpr"

  _ODS_REGIONS = (0, True)

  def __init__(self, vgpr, gpr, *, num=None, offset=None, step=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["vgpr"] = (vgpr if (
    isinstance(vgpr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(vgpr, context=_ods_context))
    attributes["gpr"] = (gpr if (
    isinstance(gpr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(gpr, context=_ods_context))
    if num is not None: attributes["num"] = (num if (
        isinstance(num, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(num, context=_ods_context))
    if offset is not None: attributes["offset"] = (offset if (
        isinstance(offset, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(offset, context=_ods_context))
    if step is not None: attributes["step"] = (step if (
        isinstance(step, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(step, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def vgpr(self):
    return self.operation.attributes["vgpr"]

  @vgpr.setter
  def vgpr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["vgpr"] = value

  @builtins.property
  def gpr(self):
    return self.operation.attributes["gpr"]

  @gpr.setter
  def gpr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["gpr"] = value

  @builtins.property
  def num(self):
    return self.operation.attributes["num"]

  @num.setter
  def num(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["num"] = value

  @builtins.property
  def offset(self):
    return self.operation.attributes["offset"]

  @offset.setter
  def offset(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["offset"] = value

  @builtins.property
  def step(self):
    return self.operation.attributes["step"]

  @step.setter
  def step(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["step"] = value

def set_gpr(vgpr, gpr, *, num=None, offset=None, step=None, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(SetGprOp(vgpr=vgpr, gpr=gpr, num=num, offset=offset, step=step, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SetTilingInfoOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.set_tiling_info"

  _ODS_REGIONS = (0, True)

  def __init__(self, value, axis, alignment, blockSize, isUniform, *, intervals=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(value))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["axis"] = (axis if (
    isinstance(axis, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(axis, context=_ods_context))
    attributes["alignment"] = (alignment if (
    isinstance(alignment, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(alignment, context=_ods_context))
    attributes["blockSize"] = (blockSize if (
    isinstance(blockSize, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(blockSize, context=_ods_context))
    attributes["isUniform"] = (isUniform if (
    isinstance(isUniform, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('BoolAttr')) else
      _ods_ir.AttrBuilder.get('BoolAttr')(isUniform, context=_ods_context))
    if intervals is not None: attributes["intervals"] = (intervals if (
        isinstance(intervals, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
          _ods_ir.AttrBuilder.get('ArrayAttr')(intervals, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def value(self):
    return self.operation.operands[0]

  @builtins.property
  def axis(self):
    return self.operation.attributes["axis"]

  @axis.setter
  def axis(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["axis"] = value

  @builtins.property
  def alignment(self):
    return self.operation.attributes["alignment"]

  @alignment.setter
  def alignment(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["alignment"] = value

  @builtins.property
  def blockSize(self):
    return self.operation.attributes["blockSize"]

  @blockSize.setter
  def blockSize(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["blockSize"] = value

  @builtins.property
  def isUniform(self):
    return self.operation.attributes["isUniform"]

  @isUniform.setter
  def isUniform(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["isUniform"] = value

  @builtins.property
  def intervals(self):
    return self.operation.attributes["intervals"]

  @intervals.setter
  def intervals(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["intervals"] = value

def set_tiling_info(value, axis, alignment, block_size, is_uniform, *, intervals=None, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(SetTilingInfoOp(value=value, axis=axis, alignment=alignment, blockSize=block_size, isUniform=is_uniform, intervals=intervals, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SoftmaxTailOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.softmax_tail"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, dim, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["dim"] = (dim if (
    isinstance(dim, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(dim, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def dim(self):
    return self.operation.attributes["dim"]

  @dim.setter
  def dim(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["dim"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

def softmax_tail(output, input, dim, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(SoftmaxTailOp(output=output, input=input, dim=dim, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class StoreOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.store"

  _ODS_REGIONS = (1, True)

  def __init__(self, output, input, *, instanceId=None, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    if instanceId is not None: attributes["instanceId"] = (instanceId if (
        isinstance(instanceId, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(instanceId, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def instanceId(self):
    return self.operation.attributes["instanceId"]

  @instanceId.setter
  def instanceId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["instanceId"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

  @builtins.property
  def body(self):
    return self.regions[0]

def store(output, input, *, instance_id=None, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(StoreOp(output=output, input=input, instanceId=instance_id, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SubViewOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.subview"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, offsets, sizes, strides, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["offsets"] = (offsets if (
    isinstance(offsets, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(offsets, context=_ods_context))
    attributes["sizes"] = (sizes if (
    isinstance(sizes, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(sizes, context=_ods_context))
    attributes["strides"] = (strides if (
    isinstance(strides, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64ArrayAttr')) else
      _ods_ir.AttrBuilder.get('I64ArrayAttr')(strides, context=_ods_context))
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def offsets(self):
    return self.operation.attributes["offsets"]

  @offsets.setter
  def offsets(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["offsets"] = value

  @builtins.property
  def sizes(self):
    return self.operation.attributes["sizes"]

  @sizes.setter
  def sizes(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["sizes"] = value

  @builtins.property
  def strides(self):
    return self.operation.attributes["strides"]

  @strides.setter
  def strides(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["strides"] = value

  @builtins.property
  def output(self):
    return self.operation.results[0]

def subview(output, input, offsets, sizes, strides, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(SubViewOp(output=output, input=input, offsets=offsets, sizes=sizes, strides=strides, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class SyncOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.sync"

  _ODS_REGIONS = (1, True)

  def __init__(self, from_, to, debugId, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["from"] = (from_ if (
    isinstance(from_, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(from_, context=_ods_context))
    attributes["to"] = (to if (
    isinstance(to, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(to, context=_ods_context))
    attributes["debugId"] = (debugId if (
    isinstance(debugId, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(debugId, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def from_(self):
    return self.operation.attributes["from"]

  @from_.setter
  def from_(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["from"] = value

  @builtins.property
  def to(self):
    return self.operation.attributes["to"]

  @to.setter
  def to(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["to"] = value

  @builtins.property
  def debugId(self):
    return self.operation.attributes["debugId"]

  @debugId.setter
  def debugId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["debugId"] = value

  @builtins.property
  def body(self):
    return self.regions[0]

def sync(from_, to, debug_id, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(SyncOp(from_=from_, to=to, debugId=debug_id, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ThrowErrorOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.throw_error"

  _ODS_REGIONS = (0, True)

  def __init__(self, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

def throw_error(*, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(ThrowErrorOp(loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class TileBeginOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.tile_begin"

  _ODS_REGIONS = (0, True)

  def __init__(self, tileId, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["tileId"] = (tileId if (
    isinstance(tileId, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I64Attr')) else
      _ods_ir.AttrBuilder.get('I64Attr')(tileId, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def tileId(self):
    return self.operation.attributes["tileId"]

  @tileId.setter
  def tileId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["tileId"] = value

def tile_begin(tile_id, *, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(TileBeginOp(tileId=tile_id, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class TransLayoutOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.trans_layout"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def output(self):
    return self.operation.results[0]

def trans_layout(output, input, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(TransLayoutOp(output=output, input=input, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class TransNativeOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.trans_native"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def output(self):
    return self.operation.results[0]

def trans_native(output, input, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(TransNativeOp(output=output, input=input, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class TransOrderOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.trans_order"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def output(self):
    return self.operation.results[0]

def trans_order(output, input, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(TransOrderOp(output=output, input=input, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ViewDdrOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.view_ddr"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def output(self):
    return self.operation.results[0]

def view_ddr(output, input, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ViewDdrOp(output=output, input=input, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ViewOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.view"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def output(self):
    return self.operation.results[0]

def view(output, input, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ViewOp(output=output, input=input, extra=extra, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class VpuCallOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.vpu_call"

  _ODS_REGIONS = (1, True)

  def __init__(self, inst, taskCommand, mode, *, instanceId=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    if instanceId is not None: attributes["instanceId"] = (instanceId if (
        isinstance(instanceId, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(instanceId, context=_ods_context))
    attributes["inst"] = (inst if (
    isinstance(inst, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(inst, context=_ods_context))
    attributes["taskCommand"] = (taskCommand if (
    isinstance(taskCommand, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('FlatSymbolRefAttr')) else
      _ods_ir.AttrBuilder.get('FlatSymbolRefAttr')(taskCommand, context=_ods_context))
    attributes["mode"] = (mode if (
    isinstance(mode, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('VpuDrivenModeAttr')) else
      _ods_ir.AttrBuilder.get('VpuDrivenModeAttr')(mode, context=_ods_context))
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def instanceId(self):
    return self.operation.attributes["instanceId"]

  @instanceId.setter
  def instanceId(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["instanceId"] = value

  @builtins.property
  def inst(self):
    return self.operation.attributes["inst"]

  @inst.setter
  def inst(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["inst"] = value

  @builtins.property
  def taskCommand(self):
    return self.operation.attributes["taskCommand"]

  @taskCommand.setter
  def taskCommand(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["taskCommand"] = value

  @builtins.property
  def mode(self):
    return self.operation.attributes["mode"]

  @mode.setter
  def mode(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["mode"] = value

  @builtins.property
  def body(self):
    return self.regions[0]

def vpu_call(inst, task_command, mode, *, instance_id=None, loc=None, ip=None) -> _ods_ir.Operation:
  return _get_op_result_or_op_results(VpuCallOp(inst=inst, taskCommand=task_command, mode=mode, instanceId=instance_id, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class ZigzagOp(_ods_ir.OpView):
  OPERATION_NAME = "hbdk.zigzag"

  _ODS_REGIONS = (0, True)

  def __init__(self, output, input, *, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(_get_op_result_or_value(input))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(output)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def input(self):
    return self.operation.operands[0]

  @builtins.property
  def output(self):
    return self.operation.results[0]

def zigzag(output, input, *, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(ZigzagOp(output=output, input=input, extra=extra, loc=loc, ip=ip))
