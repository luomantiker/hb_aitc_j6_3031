
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_result_or_value as _get_op_result_or_value,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "hbtl"

@_ods_cext.register_operation(_Dialect)
class CallOp(_ods_ir.OpView):
  OPERATION_NAME = "hbtl.call"

  _ODS_REGIONS = (0, True)

  def __init__(self, outputs, inputs, signature, *, parameters=None, library=None, diffRank=None, isCustom=None, extra=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(inputs))
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["signature"] = (signature if (
    isinstance(signature, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(signature, context=_ods_context))
    if parameters is not None: attributes["parameters"] = (parameters if (
        isinstance(parameters, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('ArrayAttr')) else
          _ods_ir.AttrBuilder.get('ArrayAttr')(parameters, context=_ods_context))
    if library is not None: attributes["library"] = (library if (
        isinstance(library, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('StrAttr')) else
          _ods_ir.AttrBuilder.get('StrAttr')(library, context=_ods_context))
    if diffRank is not None: attributes["diffRank"] = (diffRank if (
        isinstance(diffRank, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('I64Attr')) else
          _ods_ir.AttrBuilder.get('I64Attr')(diffRank, context=_ods_context))
    if isCustom is not None: attributes["isCustom"] = (isCustom if (
        isinstance(isCustom, _ods_ir.Attribute) or
        not _ods_ir.AttrBuilder.contains('BoolAttr')) else
          _ods_ir.AttrBuilder.get('BoolAttr')(isCustom, context=_ods_context))
    results.extend(outputs)
    _ods_successors = None
    super().__init__(self.build_generic(attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip))

  @builtins.property
  def inputs(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def signature(self):
    return self.operation.attributes["signature"]

  @signature.setter
  def signature(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["signature"] = value

  @builtins.property
  def parameters(self):
    if "parameters" not in self.operation.attributes:
      return None
    return self.operation.attributes["parameters"]

  @parameters.setter
  def parameters(self, value):
    if value is not None:
      self.operation.attributes["parameters"] = value
    elif "parameters" in self.operation.attributes:
      del self.operation.attributes["parameters"]

  @parameters.deleter
  def parameters(self):
    del self.operation.attributes["parameters"]

  @builtins.property
  def library(self):
    if "library" not in self.operation.attributes:
      return None
    return self.operation.attributes["library"]

  @library.setter
  def library(self, value):
    if value is not None:
      self.operation.attributes["library"] = value
    elif "library" in self.operation.attributes:
      del self.operation.attributes["library"]

  @library.deleter
  def library(self):
    del self.operation.attributes["library"]

  @builtins.property
  def diffRank(self):
    return self.operation.attributes["diffRank"]

  @diffRank.setter
  def diffRank(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["diffRank"] = value

  @builtins.property
  def isCustom(self):
    return self.operation.attributes["isCustom"]

  @isCustom.setter
  def isCustom(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["isCustom"] = value

  @builtins.property
  def outputs(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

def call(outputs, inputs, signature, *, parameters=None, library=None, diff_rank=None, is_custom=None, extra=None, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(CallOp(outputs=outputs, inputs=inputs, signature=signature, parameters=parameters, library=library, diffRank=diff_rank, isCustom=is_custom, extra=extra, loc=loc, ip=ip))
