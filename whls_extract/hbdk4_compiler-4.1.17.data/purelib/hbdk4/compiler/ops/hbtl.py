
# Autogenerated by mlir-tblgen; don't manually edit.
from .._mlir_libs import _hbdk
from ..dialects import hbtl as _ods_ext
from .common import get_value_or_create_const
from .common import get_loc_or_create_from_frames
from .common import get_type_or_create_unranked_type
from .common import create_array_attr
from .common import create_attr
from .common import parse_enum
from .common import create_elements_attr


def call(inputs, signature, diffRank=0, isCustom=False, *, parameters=None, library=None, outputs_type=None, loc=None):
    """
call hbtl kernel operation
"Given function signature, call corresponding hbtl kernel.
Non-Tensor parameters are passed via Attributes.
Support for all types of parameters would be supported in future."
    """
    inputs = get_value_or_create_const(inputs)
    signature = create_attr(signature)
    parameters = create_array_attr(parameters)
    library = create_attr(library)
    diffRank = create_attr(diffRank)
    isCustom = create_attr(isCustom)
    outputs_type = get_type_or_create_unranked_type(outputs_type)
    loc = get_loc_or_create_from_frames(loc)
    op = _ods_ext.CallOp(outputs_type, inputs, signature, diffRank=diffRank, isCustom=isCustom, parameters=parameters, library=library, loc=loc)
    _hbdk.infer_type_if_failed_infer_shape(op)
    return op.results


