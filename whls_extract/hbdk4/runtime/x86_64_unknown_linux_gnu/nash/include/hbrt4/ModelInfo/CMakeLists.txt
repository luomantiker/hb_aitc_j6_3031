if(NO_HBRT_IMPL)
  return()
endif()

set(snap_src hbrt4/ModelInfo/ModelInfo)

set(snap_output)

# The filename to the commandline arguments of protoc, must match the C++
# include path I mean filename must contains directory structure, not just base
# name
foreach(p ${snap_src})
  get_filename_component(dir "${p}" DIRECTORY)
  add_custom_command(
    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/../../${p}.pb.h
           ${CMAKE_CURRENT_BINARY_DIR}/../../${p}.pb.cc
    COMMAND ${Protobuf_PROTOC_EXECUTABLE} ${p}.proto
            --cpp_out=${CMAKE_CURRENT_BINARY_DIR}/../.. ${Protoc_Include_Flags}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/../..
    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/../../${p}.proto
            ${Protobuf_PROTOC_EXECUTABLE})
  list(APPEND snap_output ${CMAKE_CURRENT_BINARY_DIR}/../../${p}.pb.h
       ${CMAKE_CURRENT_BINARY_DIR}/../../${p}.pb.cc)
endforeach(p)

add_custom_target(hbrt4-public-include-Model-Info-Proto DEPENDS ${snap_output})

# This generates header. Add this dependencies header is generated before its .cpp files
add_dependencies(hbut-common-deps hbrt4-public-include-Model-Info-Proto)

# Ignore all warnings for source code generated by protobuf
add_compile_options(-w)
hbdk_disable_clang_tidy()
hbdk_disable_iwyu()
add_hbrt4_public_library(hbrt4-public-include-Model-Info ${snap_output})
target_link_libraries(hbrt4-public-include-Model-Info PRIVATE hb3rd_libprotobuf)
target_link_libraries(hbrt4-public-include-Model-Info
                      PUBLIC hbrt4_public_header)
